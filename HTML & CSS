What are the differences between HTML Tags and HTML Elements?
HTML Elements : HTML elements It generally consists of a start tag, content, and an end tag. Ex:- <p>Paragraph</p>, <h1>Heading</h1>
HTML Tags : HTML Tags are the starting and ending parts of an HTML element. They begin with < symbol and end with > symbol. Ex:- Start tag: <p>, <h1>, End tag: </p>, </h1	It generally consists of a start tag, content, and an end tag.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What is meant by an HTML body element?
The HTML body element defines the main content of an HTML document that displays on the web page.
It can contain text content, paragraphs, headings, images, tables, links, videos, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What are the HTML elements that are commonly used?
Some of the commonly used HTML elements are: h1, p, br, hr, a, img, div, span
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What is the use of an HTML anchor element?
We use the HTML anchor elements to navigate to other web resources or a specific HTML element within the HTML document. They are also called as Hyperlinks/ Links.
Syntax: <a href="URL">Content</a>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What is an HTML heading element and an HTML paragraph element?
Heading Element : HTML defines six levels of headings.
The HTML h1 element defines the most important heading of an HTML document.
The HTML h6 element defines the least important heading of an HTML document.
Example: <h1>Tourism</h1>
Paragraph Element : The HTML p element defines the paragraph of an HTML document. EX : <p>Plan your trip wherever you want to go</p>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What are the differences between HTML div and span elements?
The HTML div element is a block-level element It can be used to wrap around other HTML elements and apply CSS styles to many elements at once
The HTML span element is an inline element It can be used to wrap a small portion of text, etc and add CSS styles to it
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What is an HTML container element?
The HTML container element (div) defines a container. 
It can be used to wrap a group of elements and apply CSS styles to many elements at once.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are HTML tags?
HTML Tags are like keywords that define how a web browser will format and display the content.
With the help of tags, a web browser can distinguish between HTML elements and text.
Examples : p, h1, br, hr, a, img, ul, ol, li, form, input, textarea, select, option
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. How many types of HTML heading elements are there?
HTML defines six levels of headings.
HTML headings are defined with the h1 to h6 elements.
h1 element is the most important heading element.
h6 element is the least important heading element.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. What is an HTML script element?
The HTML script element can be used to embed the JavaScript code.
It can contain scripting statements, or it points to an external script file through the src attribute.
Example:  <script src="counter.js"></script>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. How many HTML h1 elements can be used on a web page?
Using more than one HTML h1 element is allowed by the HTML specification, but it is not considered a best practice.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. What is the HTML head element and why we use it?
The HTML head element is the container for the elements which provide extra information about the document (metadata).
It describes the properties of the document such as title, character set, style sheets, scripts, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. How to add line breaks to an HTML paragraph element?
The HTML br element is used to add a line break to an HTML paragraph element. It breaks the text and continue it in the next line.
It is useful in writing poems, addresses, etc.
Example: <h1 class="heading">
  Twinkle Twinkle Little Star
</h1>
<p>
  Twinkle, twinkle, little star, <br />
  How I wonder what you are! <br />
  Up above the world so high, <br />
  Like a diamond in the sky.
</p>
The HTML br element is a void element.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. How to display images on the web page?
We can display images on the web page using the HTML img element.
Generally, the HTML img element requires two main HTML attributes.
src specifies the path to the image.
alt specifies an alternate text for the image.
Syntax: <img src="IMAGE_URL" alt="image" />
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. What are the attributes we can give to an HTML image element?
The attributes we can give to an HTML image element:  src, alt, height, width, class, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What is an HTML image element?
Image Element : The HTML img element defines an Image.
Syntax: <img src="IMAGE_URL" alt="image" />
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. Does a hyperlink only apply to text?
No. We can use hyperlinks to text as well as images, buttons, etc.
<a href="link"> Link Text </a>
<a href="link"> <button>Click Here</button> </a>
<a href="link"> <img src="image.png" /> </a>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. How to create a link in HTML and what is the HTML target attribute?
The HTML anchor element can be used to create the links on a web page.
It requires the HTML href attribute to specify the URL/ path of the page where the link goes to.
HTML target attribute: The HTML target Attribute specifies where to open the linked web resource.
It can have the following values: 
Value	Description
_self	-- (Default value) It opens the document in the same window or tab as it was clicked.
_blank --	It opens the document in a new window or tab.
_parent --	It opens the document in a parent frame.
_top --	It opens the document in a full-body window.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. What is the difference between HTML anchor element and HTML link element?
HTML anchor element: We use the HTML anchor element to navigate to other web resources or a specific element within the HTML document.
HTML link element: We use the HTML link element to link the HTML and CSS files.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. What is the difference between HTML script element and HTML link element?
HTML script element: We use the HTML script element to embed the JavaScript code to HTML file.
HTML link element: We use the HTML link element to link the HTML and CSS files.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What are the differences between the HTML ordered List and the HTML unordered List?
HTML ordered list	: It is a collection of related items that follow some order or have a sequence, It is created using the ol element , By default, list items in the Ordered List are marked with numbers.
HTML unordered list : It is a collection of related items that have no special order or sequence, 	It is created using the ul element, By default, list items in the Unordered List are marked with bullets.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. Explain types of lists in HTML?
Companies Asked: Algonox
There are three types of lists in HTML:
Unordered list: It is used to group a set of related items in no particular order.
Ordered list: It is used to group a set of related items in a specific order.
Description list: It is used to display name/value pairs such as terms and definitions.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. Explain the HTML hr (horizontal line) element?
The <hr> tag in HTML is used to create a horizontal rule (a line) to separate content. It is a self-closing tag (does not require a closing </hr>), and it is often used to create a visual division between sections of content on a webpage.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. Explain about the HTML block-level elements and inline elements?
Block-level Elements:The HTML Block-level elements always start in a new line and take up the full width available. 
So, an HTML Block-level element occupies the entire horizontal space of its parent element.
Examples: HTML h1 element, HTML p element, HTML div element, etc.
Inline Elements: The HTML Inline elements do not start in a new line and take up the content width.
Examples: HTML button element, HTML img element, HTML a element, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Why Meta elements are used in HTML?
Meta elements can contain information about character encoding, description, title of the document etc.
Meta elements are used to tell the browser about the page description, author of the template, character set, keywords, etc.
Meta elements are used for search engine optimization to tell the search engine about the page contents.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
1. What is meant by the HTML href attribute?
The HTML href attribute is the most important attribute of the HTML anchor element.
It specifies the URL/path of the page the link goes to.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is an HTML class attribute?
Rephrased Question: What is class attribute and why are we using it?
The HTML class attribute is used to specify one or more classes to an HTML element.
These classes can be used to change the properties of elements using CSS or JavaScript.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Why do we use the HTML id attribute?
The HTML id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.
It can be used for styling an HTML element using CSS.
It is also used by JavaScript to access and manipulate the HTML elements with the specific id.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Name some of the attributes used in HTML?
Some of the attributes used in HTML are: class, id, href, src, for, width, height, name, alt, style, checked, type etc,...
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What is the value given to the HTML href attribute?
The value of the HTML href attribute is URL/path of the page where the link goes to.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What are the HTML attributes?
The HTML attributes provide additional information about HTML elements. 
They are always specified in the start tag.
They usually come in name/value pairs like: name="value"
Examples: src, style, alt, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What are the differences between the HTML id attribute and the HTML class attribute?
Rephrased Question: Do you know what is the difference between id and class in html?
An ID must be unique within the HTML document, so it's used only once per page. We generally use it for an element that require unique styling or need to be accessed by JavaScript for specific functionality.
On the other hand, a class can be reused across multiple elements, making it ideal for applying consistent styling.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Can multiple HTML elements have the same id?
No. There shouldn't be more than one HTML element with the same id.
The id must be unique within the HTML document.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Can a single element has multiple id?
Rephrased Question: Just like class, If multiple ids are given separated by spaces, will it work?
No. We can give only one ID to a single HTML element.
If we give multiple IDs separated by the space, the styles don't apply to the HTML element.
For example, the styles are not applied to the heading element as we have given more than one ID to it.
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <h1 id="id1 id2">Heading</h1>
  </body>
</html>

#id1 {
  color: red;
}
#id2 {
  color: green;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. Can we use the HTML p element inside an HTML span element?
The HTML span element is an inline element, which should contain only other inline elements.
So as span is an inline element and p is a block-level element, we can't use the p element inside a span element.
Note : Not all the HTML inline elements should contain only other inline elements. There are few exceptions for it. Example: HTML anchor element, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. Can we write an HTML div element in another HTML div element?
We can write multiple HTML div elements in another HTML div element.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. What is the difference between HTML and JavaScript?
JavaScript is a programming language that makes web pages more interactive and dynamic, HTML is a markup language that is used to describe the structure and layout of web pages
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. What is a viewport?
Viewport: The browser's viewport is the area of the window in which web content can be seen.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. What are the differences between HTML and Python?
HTML	Python
HTML is a markup language that is used to describe the structure and layout of web pages	Python is an interpreted, object-oriented, high-level programming language
It is generally used to format the output (How to appear on a website)	It is generally used to instruct a computer to perform certain actions on an input and return an output
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Write some HTML code snippets?
<!DOCTYPE html>
  <html>
    <head> </head>
    <body>
      <div>
        <h1>Heading</h1>
      </div>
    </body>
  </html>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Explain HTML form element?
The HTML form element can be used to create HTML forms. It is a container that can contain different types of elements like,
input, label, select, textarea, button, fieldset, legend, datalist, output, option, optgroup, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Write the basic structure of the form element?
Basic Structure of the form Element: 
<form>
  <input type="text" /> 
  <input type="submit" />
</form> The HTML form element is a container element for various input elements like text fields for names and email addresses, along with a submit button.
The above structure is commonly used for collecting user-provided information.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What are forms and how to create forms in HTML?
The form is used to collect the user inputs. HTML provides a form element to create forms.
Example: <form action="/submit_data.php">
  <label>Enter your name: </label>
  <input type="text" name="name" />
  <label>Enter Mobile number </label>
  <input type="number" name="mobile_no" />
  <input type="submit" value="Submit" />
</form>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What is checkbox and how to use checkbox?
To define a Checkbox, We need to specify the HTML type attribute with the value checkbox for an HTML input element.
Example: <input type="checkbox" id="vehicle1" name="vehicle1" value="Bike1" />
<input type="checkbox" id="vehicle2" name="vehicle2" value="Bike2" />
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What are the differences between the HTML checkbox and radio input elements?
HTML radio input element: It is used when only one option to be selected out of several available options.
It is created by using an HTML input element with the type attribute value is set to radio.
HTML checkbox input element: It is used when more than one option to be selected out of several available options.
It is also created by using the HTML input element with the type attribute value is set to checkbox.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. How to create a single-line text box for searching queries?
The HTML input element with the type search is used to add a single line text box for searching queries.
Example: <input type="search" />
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What is an HTML checked attribute?
The HTML checked attribute specifies that an input element should be pre-selected (checked) when the page loads.
Example : <input type="radio" id="genderMale" value="Male" name="gender" checked />
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are the different types of input element available and their uses?
The HTML input element can be displayed in several ways, depending on the HTML type attribute.
Below are some of the input types:
type="text" : Defines a one-line text input field.
type="password" : Defines a one-line password input field.
type="submit" : Defines a submit button to submit the form to the server.
type="radio" : Defines a radio button that is used when user has to select one option.
type="checkbox" : Defines a checkbox that is used when user has to select multiple options.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. How to create a combobox in HTML?
The HTML select element is used to create a combobox or drop-down list of options. 
The HTML option element should be inside the HTML select element for defining options in the drop-down list.
Syntax: <select>
  <option>option1</option>
  <option>option2</option>
</select>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What are the HTML media elements?
HTML media elements are used to present the audio and video.
Some of the HTML media elements are:
HTML audio element: The HTML audio element represents a sound or audio stream. It is used to play an audio file on an HTML document.
Example: <audio>
  <source src="horse.ogg" type="audio/ogg" />
  <source src="horse.mp3" type="audio/mpeg" />
  Your browser does not support the audio element.
</audio>
The HTML source element specifies multiple alternative media resources for HTML img elements or for media elements (audio, video, etc.). 
It is commonly used to give the same media content in multiple file formats for providing compatibility across different browsers.
The HTML src attribute of the source element specifies the URL/path of the media resource.
Note : The content in the HTML audio element will only be displayed in the browsers that don't support the audio.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. HTML video element:
The HTML video element represents a video. It is used to play audio files with captions, videos or movies.
Example: <video>
  <source src="movie.mp4" type="video/mp4" />
</video>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. How to embed an HTML document into another HTML document?
We can embed another HTML document within the current HTML document using the HTML iframe element.
Example: <iframe src="https://learning.ccbp.in"></iframe>
The HTML src attribute specifies the URL/path of the HTML document to embed.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. How to insert a video into the HTML document?
We can insert a video to the HTML document using:
HTML video element Example : 
<video>
  <source src="movie.mp4" type="video/mp4" />
</video> The HTML source element defines the media resource for the HTML video element.
The HTML src attribute specifies the URL/path of the media resource (e.g. video).
The HTML type attribute specifies the type/format of the media resource(e.g. video/mp4)
The HTML src attribute specifies the URL/path of the video.
To have the embed link of the YouTube video, follow these simple steps:
Open the video on YouTube and click the share button.
Open the Embed code.
Copy the value of the src attribute and paste it into the value of the HTML src attribute of our HTML iframe element.
Note : We used Boostrap Utility Embed to insert a video in Tourism Website. It also internally uses the HTML iframe element.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. How to set controls in HTML video element?
The HTML controls attribute is used to set controls in HTML video element. It is a boolean attribute. When this attribute is present, it specifies that video controls should be displayed.
Video controls include:
Play
Pause
Seeking
Volume
Fullscreen toggle
Captions/Subtitles (when available)
Track (when available)
Example:  <video controls>
  <source src="movie.mp4" type="video/mp4" />
</video>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What is the use of an HTML iframe element?
Some of the uses of HTML iframe element are:
We can embed HTML documents within the current HTML document
We can embed videos within the current HTML document, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What is an HTML picture element?
The HTML picture element is a container to provide multiple alternative sources for the HTML img element. It is useful in different display/device scenarios.
It can contain zero or more source elements and one HTML img element.
Example: 
<picture>
  <source
    media="(min-width:650px)"
    srcset="
      https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/goldentemple1-img.png
    "
  />
    <source
    media="(min-width:465px)"
    srcset="
      https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/mysore-palace1-img.png
    "
  />
    <img
    src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/varanasi1-img.png"
    alt="historical places"
  />
  </picture>
The HTML srcset attribute specifies the alternative source/ path of the img element.
The HTML media attribute specifies the media query. CSS properties will be applied based on the device type and media features like min-width, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are HTML Semantic Elements?
The word semantic means relating to meaning in language. 
So, the HTML semantic elements describe the meaning of content in between the start and end tags.
There are around a hundred semantic elements. Some of them are:
Header element :The HTML header element defines the container of introductory information or navigation links of an HTML document.
Generally, it contains heading elements, search form, logos, etc.
Example: <header>
  <h1>HTML Semantic Elements</h1>
</header>
Nav element : The HTML nav element defines the section of navigation links. 
Example: <nav>
  <ol>
    <li><a href="#home">Home</a></li>
    <li><a href="#profile">Profile</a></li>
    <li><a href="#contacts">Contacts</a></li>
  </ol>
</nav>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Main element : The HTML main element defines the main content of an HTML document.
Note : There shouldn't be more than one HTML main element without HTML hidden attribute in the HTML document.
<header>HTML</header>
<main>
  <p>HTML Stands for HyperText Markup Language.</p>
  <p>It describes the structure of a Web page and consists of HTML elements that tell the browser how to display the content.</p>
</main>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Article element : The HTML article element defines the complete part of an HTML document which is independent and reusable.
It can be used to represent a magazine, newspaper article, blog entry or any other independent item of content.
Example: <article>
  <h1>HTML</h1>
  <p>HTML Stands for HyperText Markup Language. It describes the structure of a Web page.<p>
</article>

<article>
  <h1>CSS</h1>
  <p>CSS Stands for Cascading Style Sheets. It describes the styles for the HTML documents, including design, layout, etc. </p>
</article>

<article>
  <h1>JavaScript</h1>
  <p>JavaScript is a programming language used both on the client-side and server-side that allows you to make web pages interactive.</p>
</article>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Section element : The HTML section element defines the generic section of an HTML document.
It is generally used to group content that has a heading.
Note : The HTML section and HTML article elements are conceptually similar and interchangeable. But the HTML section element differs from article element because it isn’t necessarily self-contained (complete).
<section>
  <h1>Uses of HTML</h1>
  <ul>
    <li>Structuring web pages</li>
    <li>Creating Hyperlinks</li>
    <li>Embedding images and videos</li>
  </ul>
</section>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aside element : The HTML aside element defines the portion of an HTML document whose content is only indirectly related to the HTML document's main content.
It specifies the content of less importance.
It is generally used to represent sidebars or call-out boxes.
Example: <article>
  <h1>HTML</h1>
  <p>HTML Stands for HyperText Markup Language. It describes the structure of a Web page.<p>
</article>

<aside>
  <h1>Website</h1>
  <p>Website is a collection of webpages.</p>
</aside>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Footer element : The HTML footer element defines the footer of a page or section.
It generally contains information about the author of the section, copyright data, or links to related documents.
Example: <footer>
  <p>Email me at rahul@gmail.com</p>
</footer>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. What are the uses of Semantic HTML?
Some of the uses of Semantic HTML are:
Accessibility: It makes web pages accessible for mobile devices and people with disabilities as well. This is because screen readers and browsers can understand the code better.
Search Engine Optimization: It improves the website Search Engine Optimization Rankings which increases the number of people that visit our webpage.
Easy to Understand: It makes our code more readable and easier to understand.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. what is the importance of semantic elements in HTML?
Intent of the interviewer: The interviewer wants to know if you understand what semantic HTML is and how it helps make web content accessible.
Rephrased Question: Can you tell me about semantic HTML? How is it accessible for the web content?
Semantic elements in HTML describe the meaning of content within tags.
For example, nav represents a navigation section, while footer represents the footer that contains author and copyright details, etc.
With these, HTML code is easy to read and understand
Webpages are more accessible to disabled users as tools like screen readers can easily understand it.
Search engine rankings and visibility increase as search engines can easily understand it.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. What are HTML non-semantic elements?
The HTML non-semantic elements don't have any meaning.
Examples: div and span.
We cannot exactly find out the type of content within the given element unlike semantic elements like h1, p, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. What are the differences between HTML semantic and non-semantic elements?
semantic : elements have the meaning, They describe the content they contain
non-semantic : non-semantic elements don't have the meaning, They can contain anything
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. What are Global attributes?
Global attributes are attributes common to all HTML elements.
They can be used on all elements, though they may not affect some elements.
Examples: class, id, title, etc.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. What are HTML selected and multiple attributes?
Selected Attribute: It is a boolean attribute. It specifies that an option should be pre-selected when the page loads.
Example:	<option value="Active" selected>Active</option>
Multiple Attribute: It is a boolean attribute. It specifies whether the user is allowed to provide more than one value in an input field.
It can be used in the HTML select element.
Example: <label for="cars">Choose a car:</label>
<select name="cars" id="cars" multiple>
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="opel">Opel</option>
  <option value="audi">Audi</option>
</select> 
Note : Multiple options can be selected by holding down the control(ctrl)/command button
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. What is an HTML required attribute
The HTML required attribute is a boolean attribute.
If present, it specifies that an input field must be filled out before submitting the form.
Example: <form>
  <label for="username">Username:</label>
  <input type="text" id="username" name="username" required />
  <input type="submit" />
</form>
---------------------------------------------------------------------------------------------------------------------------------------------------------------
14. What is an HTML html element?
The HTML html element defines the root of an HTML document.
It is a container for all the other HTML elements.
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <h1>Tourism</h1>
    <p>Plan your trip wherever you want to go</p>
  </body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What are the HTML formatting elements?
The HTML formatting elements are used to format the text.
Some of them are:
b	: It is used to bold the text
strong : 	It bolds the text and is used to tell the browser that the text is important
i : 	It is used to make the text italic
em	: It makes the text italic and is used to tell the browser that the text has to be emphasized
mark	: It is used to mark or highlight a text for special interest or reference purposes
small	: It is used to display the smaller text especially for copyrights and side-comments
del	: It is used to display the deleted content
ins	: It is used to display the additional content
sub	: It is used to subscript a text
sup	: It is used to superscript a text
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. What are HTML entities?
HTML entities are strings that start with an ampersand (&) and ends with a semicolon (;).
These are used to display the reserved characters (characters that are part of the HTML code. >, < in tags) and invisible characters (non-breaking spaces, etc.).
Character	Entity	Note
&	&amp;	Treated as the beginning of an entity.
<	&lt;	Treated as the beginning of a tag
>	&gt;	Treated as the ending of a tag
"	&quot;	Treated as the beginning and end of an attribute's value
non-breaking space	&nbsp;	Space that will not break into a new line
Example: <p>&lt; and &gt; are comparison operators</p>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. What is an HTML style element?
The HTML style element contains style information for an HTML document, or part of an HTML document. It contains CSS, which is applied to the contents of the HTML document.
Example: <!DOCTYPE html>
<html>
  <head>
    <style>
      h1 {
        color: red;
      }
      p {
        color: blue;
      }
    </style>
  </head>
  <body>
    <h1>Tourism</h1>
    <p>Plan your trip</p>
  </body>
</html>
The HTML style element must be placed inside the HTML head element.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. Explain HTML meter element?
The HTML meter element defines a scalar measurement within a known range or a fractional value. To use the HTML meter element, we need to know the maximum value.
Some of the attributes of the HTML meter element are:
high
low
max
min
optimum
value, etc.
Example: <meter value="0.6">60%</meter>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. What is an HTML del element?
The HTML del element represents the text that has been deleted from an HTML document.
Example: <del>thinking</del>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What HTML element defines the title of a work?
The HTML cite element defines the title of a poem, book, song, movie, etc.
Example: <p>My favorite book is <cite>Atomic Habits</cite> by James Clear</p>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. What HTML element underlines the text?
The HTML u element underlines the text.
It is generally used to identify the misspelt terms.
Example: <p>The <u>see</u> is full of fish.</p>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. What is an HTML details element?
The HTML details element defines a disclosure widget where we can see the additional information.
It has two states:
open: We can see the additional information.
close: We can't see the additional information. We can see only the summary.
Example: <details>
  <summary>Details</summary>
  Something small enough to escape casual notice.
</details>
The summary element defines the label or summary.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. How to create a range in HTML?
The HTML input element with the type range is used to create a range in HTML.
It lets the user provide a number within the given range in the form of a slider.
Example: <input type="range" id="volume" name="volume" min="0" max="11" />
<label for="volume">Volume</label>
The HTML min attribute specifies the minimum value allowed
The HTML max attribute specifies the maximum value allowed
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Why HTML 5 is best compared to old versions?
HTML 5 is the latest version of HTML.
Some of the new features added in HTML5 that make it better than HTML are:
audio and video elements
semantic elements like header, footer, figure, figcaption, nav, etc.
placeholder attribute
progress element, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. What is an HTML marquee tag?
Companies Asked: Algonox
The <marquee> tag in HTML was used to create a scrolling effect for text or images either horizontally or vertically. It was often used for creating scrolling news tickers or similar effects on web pages.
<marquee>This text will scroll from right to left</marquee>
You could control various aspects of the marquee behavior using attributes:
direction: Specifies the direction of the scrolling. Values can be "left", "right", "up", or "down". Default is "left".
behavior: Specifies the type of scrolling. Values can be "scroll", "slide", or "alternate".
loop: Specifies how many times the content should scroll. Default is "infinite".
scrollamount: Specifies the number of pixels to jump each time. Larger values make the scrolling faster.
scrolldelay: Specifies the delay (in milliseconds) between each jump.
width and height: Specify the width and height of the marquee, respectively.
For example: <marquee direction="up" width="200" height="100" behavior="alternate" scrollamount="2">
  This text will alternate scrolling up and down
</marquee>
However, it's essential to note that the <marquee> tag is not part of any specification (neither HTML4.01 nor HTML5), and it's generally considered to be outdated and not recommended for modern web design. The may not work consistently across all browsers.
For modern websites, if you need similar effects, it's more appropriate to use CSS animations or JavaScript libraries that offer more control, accessibility, and responsiveness.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
what is html why do we need to use html ? advantages ? disadvantages ? history of html ?
What is HTML? : HTML (HyperText Markup Language) is the standard markup language used to create and design web pages. It provides the structure and content for web pages by using a series of elements (tags) to define headings, paragraphs, images, links, forms, and other types of content. HTML is the backbone of every website, allowing browsers to display content in a structured and organized manner.
Why Do We Need to Use HTML? : HTML is essential for web development because it: 
Defines Structure: HTML provides the basic structure of web pages, which can be enhanced and modified by other technologies like CSS and JavaScript.
Content Display: It allows the display of text, images, videos, forms, and other multimedia on web pages.
SEO: Proper use of HTML elements improves the search engine optimization (SEO) of web pages, making them more discoverable.
Accessibility: HTML ensures that web content is accessible to users with disabilities, as screen readers and other assistive technologies rely on HTML structure.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Advantages of HTML
Simplicity: HTML is easy to learn and use, making it accessible to beginners and experienced developers alike.
Platform Independence: HTML is platform-independent, meaning web pages can be displayed on any device with a web browser.
Wide Support: HTML is widely supported by all web browsers, ensuring consistent display across different platforms.
Extensibility: HTML can be extended with CSS and JavaScript to create dynamic and interactive web pages.
SEO Friendly: Proper use of HTML elements and attributes improves the SEO of web pages.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Disadvantages of HTML
Limited Styling: HTML alone has limited styling capabilities, requiring CSS to enhance the visual presentation.
Static Content: HTML is primarily used for static content, and additional technologies like JavaScript are needed for dynamic and interactive features.
Browser Compatibility: While HTML is widely supported, different browsers may interpret certain elements differently, leading to inconsistencies.
Code Redundancy: Without proper structuring, HTML code can become redundant and difficult to manage for large projects.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
History of HTML
1989-1991: HTML was first proposed by Tim Berners-Lee, a physicist at CERN, as a means to share documents and information over the Internet.
1993: The first official specification of HTML was published by the Internet Engineering Task Force (IETF) as HTML 2.0.
1995: HTML 3.2 introduced new features like tables, scripting, and improved forms.
1999: HTML 4.01 became a W3C recommendation, introducing elements for accessibility, internationalization, and multimedia.
2008: HTML5 was introduced, addressing the needs of modern web development, with support for multimedia, APIs, and semantic elements.
2014: HTML5 became a W3C recommendation, solidifying its status as the latest standard for web development.
HTML has evolved significantly over the years, from a simple markup language to a robust and versatile tool for creating web pages. It remains the foundation of web development, providing the structure and content for the vast majority of websites.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example HTML Code:
html
<!DOCTYPE html> 
<html>
<head>
    <title>HTML Example</title>
</head>
<body>
    <header>
        <h1>Welcome to My Website</h1>
    </header>
    <main>
        <section>
            <p>This is the first paragraph. It provides an introduction to the content of the website.</p>
            <button onclick="alert('Button clicked!')">Click Me!</button>
        </section>
    </main>
    <footer>
        <p>&copy; 2025 My Website</p>
    </footer>
</body>
</html>
Explanation of Each Part:
<!DOCTYPE html> : DOCTYPE Declaration: Informs the browser that the document is an HTML5 document. It is essential for ensuring that the page is rendered correctly.
<html> : HTML Element: The root element of the HTML document. It contains all other elements on the page.
<head> : Head Element: Contains meta-information about the HTML document, such as the title, character set, and linked resources (e.g., CSS and JavaScript files).
<title> : Title Element: Sets the title of the HTML document, which appears in the browser's title bar or tab.
<body> : ; Body Element: Contains the content of the HTML document that is displayed in the browser, such as text, images, and interactive elements.
<header>  : Header Element: Represents introductory content or a group of navigational links. It typically contains headings and other metadata about the document.
<h1> : Heading Element: Defines the main heading of the document. There are six levels of headings (<h1> to <h6>), with <h1> being the most important.
<main> : Main Element: Represents the main content of the document. It is used to group the primary content, distinct from other sections such as headers and footers.
<section> : Section Element: Represents a standalone section of content within the main content. It is used to group related content together.
<p> : Paragraph Element: Defines a paragraph of text. It is used to group blocks of text into separate paragraphs.
<button> : Button Element: Represents a clickable button. The onclick attribute is used to specify the JavaScript function to be executed when the button is clicked.
<footer> : Footer Element: Represents the footer of the document or a section. It typically contains information about the author, copyright, links to related documents, etc.
HTML Entity: Represents the copyright symbol (©). HTML entities are used to represent special characters in HTML.
Additional Notes: Tags: HTML tags are the building blocks of HTML elements. They are enclosed in angle brackets (< >) and usually come in pairs (opening tag and closing tag). Example: <p> and </p>.
Attributes: Attributes provide additional information about HTML elements. They are placed inside the opening tag and have a name and value. Example: onclick="alert('Button clicked!')".
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
why do we use docType in html ?
The <!DOCTYPE> declaration is used in HTML to inform the web browser about the version of HTML the document is written in. It helps the browser to render the content correctly and in compliance with the specified HTML standard.
Importance of <!DOCTYPE>
Standards Mode vs. Quirks Mode: The <!DOCTYPE> declaration triggers standards mode in the browser, ensuring that the web page is rendered according to the latest HTML and CSS specifications. Without it, the browser may fall back to quirks mode, where it uses outdated rendering rules to maintain compatibility with older websites.
Cross-Browser Compatibility: Using a <!DOCTYPE> declaration helps ensure that the web page is rendered consistently across different browsers, reducing inconsistencies and unexpected behaviors.
Validation: The <!DOCTYPE> declaration allows the HTML document to be validated against the specified HTML standard, helping developers identify and fix errors.
Example of <!DOCTYPE>
For HTML5, the <!DOCTYPE> declaration is:
html
<!DOCTYPE html>
<html>
<head>
    <title>HTML5 Example</title>
</head>
<body>
    <h1>Hello, world!</h1>
</body>
</html>
In this example, <!DOCTYPE html> declares that the document is an HTML5 document.
Historical Perspective
In older HTML versions, the <!DOCTYPE> declaration was more complex and included references to DTDs (Document Type Definitions). For example, for HTML 4.01 Strict, it looked like this:
html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
With the introduction of HTML5, the declaration was simplified to <!DOCTYPE html> to make it easier for developers to use and understand.
Using the correct <!DOCTYPE> is essential for ensuring that your web pages are rendered properly and consistently across different browsers.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Basics
Elements/Tags : HTML documents are made up of elements, represented by tags. Tags are the building blocks of an HTML document and define how content is structured.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>HTML Example</title>
</head>
<body>
    <h1>Welcome to HTML</h1>
    <p>This is a paragraph.</p>
</body>
</html>
In this example, <html>, <head>, <title>, <body>, <h1>, and <p> are HTML tags.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Attributes : Attributes provide additional information about HTML elements. They are placed inside the opening tag and have a name and value.
Example:
html
<a href="https://www.example.com" target="_blank">Visit Example</a>
In this example, href and target are attributes of the <a> tag.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Inline Styles : Inline styles are used to apply CSS directly within an HTML element using the style attribute.
Example:
html
<p style="color: blue; font-size: 18px;">This is a styled paragraph.</p>
In this example, the paragraph is styled with blue text color and a font size of 18 pixels.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Formatting Elements : Formatting elements are used to apply specific formatting to text, such as making it bold, italic, or underlined.
Example:
html
<p><b>Bold text</b></p>
<p><i>Italic text</i></p>
<p><u>Underlined text</u></p>
In this example, the text is formatted using <b>, <i>, and <u> tags for bold, italic, and underlined text, respectively.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Class and ID : Classes and IDs are used to apply styles and identify elements in HTML.
Example:
html
<p class="highlight">This is a highlighted paragraph.</p>
<p id="unique-paragraph">This is a unique paragraph.</p>
In this example, class="highlight" and id="unique-paragraph" are used to identify the paragraphs for styling and manipulation.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML JavaScript : JavaScript can be used within HTML to add interactivity and dynamic behavior to web pages.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>HTML JavaScript Example</title>
</head>
<body>
    <button onclick="showAlert()">Click Me!</button>
    <script>
        function showAlert() {
            alert("Button clicked!");
        }
    </script>
</body>
</html>
In this example, a button is created with an onclick event that triggers the showAlert function, displaying an alert when the button is clicked.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Forms : Forms are used to collect user input and submit it to a server.
Example:
html
<form action="/submit" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name">
    <input type="submit" value="Submit">
</form>
In this example, a form is created with a text input for the user's name and a submit button.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Inline and Block Elements : Inline elements do not start on a new line and only take up as much width as necessary. Block elements start on a new line and take up the full width available.
Example:
html
<p>This is a <span style="color: red;">red text</span> inside a paragraph.</p>
<div>This is a block element.</div>
In this example, <span> is an inline element (some of inline elemnets are <span>, <a>, <strong>, <em> ), and <div> is a block element ( <div>, <p>, <h1>, <section> are some examples of block elements	).
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Hierarchy : HTML documents have a hierarchical structure, starting with the <html> element, which contains the <head> and <body> elements, which in turn contain other elements.
HTML follows a hierarchical structure where elements are arranged in a parent-child relationship. This hierarchy defines how elements are nested and organized within a webpage.
HTML Document Structure (Hierarchy)
html
<!DOCTYPE html> <!-- Root: Defines HTML5 -->
<html> <!-- Parent: Root element -->
<head> <!-- Child of <html> -->
    <title>Page Title</title> <!-- Child of <head> -->
</head>
<body> <!-- Child of <html> -->
    <header> <!-- Child of <body> -->
        <h1>Website Header</h1> <!-- Child of <header> -->
    </header>
    <nav> <!-- Child of <body> -->
        <ul> <!-- Parent (contains list items) -->
            <li><a href="#">Home</a></li> <!-- Child of <ul> -->
            <li><a href="#">About</a></li>
        </ul>
    </nav>
    <main> <!-- Main content -->
        <section> <!-- Child of <main> -->
            <h2>Section Title</h2> <!-- Child of <section> -->
            <p>Paragraph inside section.</p>
        </section>
    </main>
    <footer> <!-- Footer section -->
        <p>© 2024 All Rights Reserved</p>
    </footer>
</body>
</html>
🔹 HTML Hierarchy Levels
Level	HTML Elements	Description
1 (Root)	<html>	The highest-level element (parent of all elements).
2 (Metadata & Content)	<head>, <body>	Direct children of <html>.
3 (Sections & Layouts)	<header>, <nav>, <main>, <section>, <footer>	Structure the webpage content.
4 (Text & Lists)	<h1>-<h6>, <p>, <ul>, <li>	Define headings, paragraphs, and lists.
5 (Inline Elements)	<a>, <span>, <strong>	Used inside text-based elements.
🔹 Understanding Parent-Child Relationships
Parent: An element that contains another element.
Child: An element nested inside another element.
Sibling: Elements on the same level.
✅ Example:
html
<div> <!-- Parent -->
    <p> This is a paragraph </p> <!-- Child -->
    <p> Another paragraph </p> <!-- Sibling -->
</div>
🔹 Why HTML Hierarchy Matters?
✔ Improves SEO (Search Engines understand structured content better).
✔ Enhances Readability (Well-structured code is easier to manage).
✔ Accessibility (A11Y) (Screen readers rely on hierarchy for navigation).
✔ Affects CSS & JavaScript (Styles and scripts depend on element relationships).
🚀 Summary
HTML follows a parent-child hierarchy.
<html> is the root, containing <head> and <body>.
Elements like <header>, <nav>, <main> organize the layout.
Proper hierarchy improves SEO, accessibility, and maintainability.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML iFrames : An <iframe> (inline frame) is used to embed another HTML document within the current document. It allows you to display content from another source, such as a different website or a specific section of the same site.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>iFrame Example</title>
</head>
<body>
    <h1>Embedding an iFrame</h1>
    <iframe src="https://www.example.com" width="600" height="400" title="Example iFrame"></iframe>
</body>
</html>
In above example, the <iframe> tag embeds the content of "https://www.example.com" within the current document.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Head Elements : The <head> element contains meta-information about the HTML document, such as the title, linked resources, scripts, and styles.
Title : The <title> element sets the title of the HTML document, which appears in the browser's title bar or tab.
Example:
html
<head>
    <title>My Website</title>
</head>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Link : The <link> element is used to connect external resources (like CSS, icons, and preloaded assets).
Example:
html
<head>
    <link rel="stylesheet" href="styles.css">
</head>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Script : The <script> element is used to include JavaScript code within the HTML document.
Example: <link rel="stylesheet" href="styles.css">, <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
html
<head>
    <script src="script.js"></script>
</head>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Style : The <style> element is used to define internal CSS styles.
Example:
html
<head>
    <style>
        body {
            background-color: lightblue;
        }
    </style>
</head>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Meta : The <meta> element provides metadata about the HTML document, such as character set, author, and viewport settings.
Example:
html
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A brief description of my website">
</head>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Semantic Elements : Semantic elements clearly describe their meaning to both the browser and the developer. They make the HTML code more readable and improve accessibility.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>Semantic Elements Example</title>
</head>
<body>
    <header>
        <h1>Welcome to My Website</h1>
    </header>
    <nav>
        <ul>
            <li><a href="#home">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
        </ul>
    </nav>
    <main>
        <article>
            <h2>Article Title</h2>
            <p>Article content goes here.</p>
        </article>
    </main>
    <footer>
        <p>&copy; 2025 My Website</p>
    </footer>
</body>
</html>
In this example, semantic elements such as <header>, <nav>, <main>, <article>, and <footer> are used to structure the content.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Self-Closing Elements : Self-closing elements are HTML elements that do not require a closing tag. They are used for elements that do not contain content.
Example:
html
<img src="image.jpg" alt="Example Image">
<br>
<hr>
<input type="text" name="username">
In this example, <img>, <br>, <hr>, and <input> are self-closing elements.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Unicode : Unicode is a standard for encoding text in different writing systems and languages. It provides a unique code point for every character, regardless of platform, program, or language.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>Unicode Example</title>
</head>
<body>
    <p>Smile: &#x1F600;</p>
    <p>Heart: &#x2764;</p>
</body>
</html>
In this example, the Unicode characters for a smiley face (😀) and a heart (❤️) are displayed using their Unicode code points.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Events : HTML events are actions or occurrences that happen in the browser, such as user interactions or page loading. Event handlers can be used to respond to these events.
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>HTML Events Example</title>
</head>
<body>
    <button onclick="alert('Button clicked!')">Click Me!</button>
    <input type="text" onfocus="this.style.backgroundColor='yellow';" onblur="this.style.backgroundColor='';">
</body>
</html>
In this example: The onclick event on the button triggers an alert when the button is clicked. The onfocus and onblur events on the input field change its background color when it gains or loses focus.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1️⃣ Parsing of HTML on Browser
🔹 What is HTML Parsing? : When you load a webpage, the browser parses (reads and processes) the HTML code to construct a DOM (Document Object Model), which represents the page structure.
🔹 Steps of HTML Parsing
HTML is Loaded → The browser downloads the HTML file.
Tokenization → The HTML is broken into tokens (tags, attributes, content).
DOM Tree Construction → The browser builds a hierarchical structure.
CSSOM Creation → If a CSS file is linked, the CSS Object Model (CSSOM) is built.
Render Tree Formation → Combines DOM and CSSOM for visual display.
Painting & Compositing → The page is drawn on the screen.
✅ Example: Parsing Flow
html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>HTML Parsing</title>
    <link rel="stylesheet" href="style.css"> <!-- CSS parsing -->
    <script>
        console.log("Script Executed!"); // JavaScript is parsed & executed
    </script>
</head>
<body>
    <h1>Hello, Browser Parsing!</h1>
</body>
</html>
🔹 Browser Processing:
✔ Reads <html> → Builds the DOM Tree.
✔ Reads <link> → Downloads and processes CSS.
✔ Reads <script> → Executes JavaScript (blocking or deferred).
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2️⃣ Responsive Web Design (RWD)
🔹 What is Responsive Web Design? : RWD ensures that websites adapt to different screen sizes (mobile, tablet, desktop) using CSS media queries, flexible layouts, and relative units.
✅ Example: Responsive Layout
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            width: 100%;
            max-width: 1200px;
            margin: auto;
        }
        /* Responsive Design */
        @media screen and (max-width: 768px) {
            body {
                background-color: lightblue;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Responsive Web Design</h1>
        <p>Resize the window to see the effect.</p>
    </div>
</body>
</html>
In this example, the container's width adapts based on the screen size, ensuring that the content is displayed correctly on both small and large devices.
🔹 Key Features:
✔ Meta viewport → Ensures proper scaling on mobile.
✔ CSS Media Queries → Changes layout based on screen size.
✔ Flexible Containers → Uses %, vh, vw, em instead of fixed px.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3️⃣ Reserved Characters in HTML
🔹 What Are Reserved Characters? : Some characters have special meanings in HTML and need to be escaped using HTML entities.
✅ Common Reserved Characters & Entities
Character	Entity Code	Description
<	&lt;	Less than
>	&gt;	Greater than
&	&amp;	Ampersand
" "	&quot;	Double Quote
' '	&apos;	Single Quote
Example:
html
<!DOCTYPE html>
<html>
<head>
    <title>Reserved Characters Example</title>
</head>
<body>
    <p>Less than: &lt;</p>
    <p>Greater than: &gt;</p>
    <p>Ampersand: &amp;</p>
    <p>Quotation mark: &quot;</p>
</body>
</html>
In this example, the reserved characters <, >, &, and " are displayed using their corresponding HTML entities (&lt;, &gt;, &amp;, and &quot;).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4️⃣ HTML Accessibility (A11Y) : 🔹 What is HTML Accessibility? : Accessibility ensures that websites are usable by people with disabilities, including screen readers, keyboard navigation, and color contrast adjustments.
✅ Best Practices for HTML Accessibility
✔ Use semantic elements (<header>, <main>, <footer>, <nav>, <section>).
✔ Use ARIA attributes (role, aria-label, aria-hidden).
✔ Ensure keyboard navigation (tab-friendly elements).
✔ Provide alt text for images (<img alt="Description">).
✅ Example: Accessible Form
html
<form>
    <label for="name">Name:</label>
    <input type="text" id="name" aria-required="true">
    <button type="submit">Submit</button>
</form>
🔹 Features:
✔ for="name" links label with input for screen readers.
✔ aria-required="true" indicates a required field for assistive tech.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5️⃣ HTML Canvas (Graphics & Animations)
🔹 What is HTML <canvas>? : The <canvas> element allows drawing graphics, animations, and real-time rendering using JavaScript.
✅ Example: Drawing on Canvas
html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Canvas Example</title>
</head>
<body>
    <canvas id="myCanvas" width="400" height="200" style="border:1px solid black;"></canvas>
    <script>
        let canvas = document.getElementById("myCanvas");
        let ctx = canvas.getContext("2d");
        ctx.fillStyle = "blue";
        ctx.fillRect(50, 50, 150, 100); // Draws a rectangle
    </script>
</body>
</html>
🔹 Key Features:
✔ getContext("2d") → Access 2D drawing context.
✔ fillRect(x, y, width, height) → Draws a rectangle.
✔ Supports games, charts, and visual effects.
🚀 Summary
Topic	Key Points
HTML Parsing	Browsers build a2 DOM tree, process CSS & JS, and render the page.
Responsive Web Design	Uses meta viewport, media queries, and flexible units for mobile-friendly layouts.
Reserved Characters	<, >, & and others need escaping with HTML entities.
HTML Accessibility	Use semantic tags, ARIA attributes, keyboard-friendly navigation.
HTML Canvas	Allows drawing graphics and animations using JavaScript.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What is the full form of CSS?
The full form of CSS is Cascading Style Sheets.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Why do we use Style Sheets?
Style sheets describe the presentation of HTML documents, including colors, layout, and fonts.
They also make the HTML documents to adapt the presentation to different types of devices, such as large screens, small screens, or printers, etc.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. How to link the CSS file to the HTML file?
The HTML link element is used to link the CSS file to the HTML file. It should be placed in the HTML head element.
<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="tourism.css" />
  </head>
  <body>
    ...
  </body>
</html>
The HTML rel attribute stands for a relationship of the linked document to the current document. In this case, it is a stylesheet.
The HTML href attribute stands for the URL/path of the CSS file.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What is CSS?
CSS stands for Cascading Style Sheets.
It is the stylesheet language that is used to define styles for the HTML documents, including the design, layout and variations in display for different devices and screen sizes.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. How to add CSS to the HTML document?
CSS can be added to HTML documents in 3 ways.
Inline: by using the HTML style attribute in the HTML elements.
Internal: by using the HTML style element in the HTML head element.
External: by using the HTML link element to link an external CSS file.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What is the Internal Style Sheet and External Style Sheet in CSS?
Internal Style Sheet:
In Internal Style Sheet, CSS property-values are defined in the HTML style element inside the HTML head element.
It is used to define the styles for a single HTML document.
External Style Sheet:
In External Style Sheet, CSS property-values are defined in a separate .css file.
It can be used to define the styles for many HTML documents.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are the CSS Styles?
Styles in CSS are rules that describe the presentation of an HTML document.
Style information can be either attached as a separate document or embedded in the HTML document.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Why do we need CSS?
CSS is used to style an HTML document.
It brings an HTML document to life, by choosing fonts, applying colors, defining margins, positioning elements, animating interactions, and much more.
So, the HTML documents would look pretty boring without CSS.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. Explain Inline styles?
The Inline styles are applied directly to an HTML element. They use the HTML style attribute, with CSS property values defined within it.
Syntax: <tag style="property1: value1; property2: value2; ...">Content</tag>
The HTML style attribute value can consist of one or more CSS property values.
Note Generally using Inline Styles is not recommended because,
Inline Styles are not reusable.
Writing HTML and CSS separately increases code readability.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. What is a responsive web design?
Responsive web design: Responsive web design is an approach to making web pages give the best user experience on all devices.
A responsive website will automatically adjust for different screen sizes and viewports.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. Which of the following are CSS Units?
A. px
B. pt
C. em
D. all
Answer: Option D (all)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. What are the advantages of using CSS?
Some of the advantages of using CSS are:
Saves Time : CSS can save you time. Once a style sheet is created, we can use it multiple times. The best practice for CSS is to save it as a .css file, separate from your .html file. Whenever you find a style that you like, you can apply it to as many pages as we would like.
Efficient : CSS is efficient. It requires a few lines of code to style a webpage. So, it speeds up loading time and keeps files relatively lightweight.
Easier to Learn :CSS is very easy to learn and update, which makes global changes to style simple and quick.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. What are the advantages and disadvantages of CSS?
Advantages of CSS
CSS saves a lot of time.
It helps to make consistent and spontaneous changes.
It improves the loading speed of the page.
It has better device compatibility.
Disadvantages of CSS
There could be cross-browser issues while using CSS.
There are multiple levels of CSS such as CSS, CSS 2, CSS 3. This can create a confusion for non-developers and beginners.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Can we add multiple class names to the HTML class attribute?
We can provide multiple class names separated by space as a value to the HTML class attribute.
Syntax: <tag class="name1 name2 name3 name4 ...">Content</tag>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What is meant by the CSS Selector and what are the different types of it?
The CSS Selectors are used to select the HTML elements that we want to style.
The different types of CSS Selectors are:
Simple Selectors
Class Selector
ID Selector
Type (tag name) Selector
Attribute Selector
Universal Selector
Pseudo-class
Compound Selectors
Complex Selectors and many more.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. Which has more specificity among Inline Styles and Class Selectors?
Inline Styles have more specificity than Class Selectors.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. What is the need for CSS Selectors?
The CSS Selectors are used to select the HTML elements that we want to style.
There are a wide variety of CSS selectors like id, class, type, etc.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. Explain the HTML id attribute and the class attribute?
HTML id Attribute:
The HTML id attribute is used to specify the unique id to an HTML element.
This attribute can be used by CSS and JavaScript to style or perform DOM manipulations to a particular element with the specified id.
Syntax: <h1 id="heading">CSS Selectors</h1>
HTML class Attribute:
The HTML class attribute is used to specify one or more class names to an HTML element.
This attribute can be used by CSS and JavaScript to style or perform DOM manipulations to the HTML elements with the specified class name.
Syntax: <h1 class="heading main-heading">CSS Selectors</h1>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is the id attribute and how did you write in CSS?
The HTML id attribute specifies a unique id for an HTML element. The value of id attribute must be unique within the HTML document.
In CSS, we select this element with a # followed by the value of the id attribute.
Example: #heading {
  color: red;
  font-size: 20px;
}
<h1 id="heading">This text will be red and 20px in size.</h1>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Do you know about Hash selector?
Rephrased Question: Do you know ID selector
The hash selector in CSS, also known as the ID selector, is used to select an element with a specific id. It is represented by a hash (#) symbol followed by the ID of the element.
Here's the syntax: #id {
    /* CSS properties */
}
For example, if you have an HTML element like this:
<div id="myElement">Hello, World!</div>
You can style it using the hash selector in your CSS like this:
#myElement {
    color: blue;
    font-size: 20px;
}This will apply the specified styles to the element with the ID myElement. The ID should be unique within a page. Therefore, the hash selector is used when you want to find an element with a unique ID.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. What CSS property-values will be applied to an HTML element if it has both HTML id and class attributes?
All the CSS properties in both the id and class selectors will be applied to the HTML element.
If there are any CSS properties in common between the id and class selectors, then CSS property values in the id selector will be applied to the HTML element because of higher specificity.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What is CSS Specificity?
CSS Specificity is how browsers decide which CSS property values are the most relevant to an HTML element and apply those CSS property values to the HTML element.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. Explain Low to high specificity in CSS Selectors?
The following list of CSS Selectors is in the lowest to highest order by specificity.
Universal Selector
type/ tag name Selector
class Selector
id Selector
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. How do you change the style of an HTML element with and without a CSS Class Selector?
Without CSS Class Selector
Using inline styles and other CSS selectors like type/tag name, id selectors etc.
Example: Using inline styles  <h1 style="color:blue;"></h1>
With CSS Class Selector
 In HTML, specifying the HTML class attribute and its value as the class name to the HTML element.
 <h1 class="heading">CSS Selectors</h1>
In CSS, the . character, followed by the class name has to be specified as a class attribute value to the HTML element.
 .heading {
 color: blue;
 }
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. What is a Universal selector?
The universal selector selects all the HTML elements in an HTML document.
* {
  color: green;
  font-size: 20px;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. How to style a particular HTML element?
We can style a particular HTML element with CSS in many ways.
Inline styles: An inline style can be used to apply the styles to a single HTML element.
To use inline styles, add the style attribute to the relevant element and define the CSS property values within it.
<p style="color:red;">Plan your trip</p>
CSS Selectors:  CSS Selectors let you apply CSS styles to a specific HTML element.
It might be in either internal CSS or external CSS.
Example: Using CSS class selectors
<p class="paragraph">This is a paragraph.</p>
.paragraph {
 color: red;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. How to override CSS style with the !important rule?
Adding another CSS rule with !important, and using a selector with higher specificity (adding an additional tag, id, or classname to the selector).
Adding another CSS rule with the same selector later in the stylesheet.
Example: Using a selector with higher specificity
p {
  height: 50px !important;
}
.first-paragraph {
  height: 60px !important;
}
#paragraph {
  height: 70px !important;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is the role of CSS?
Companies Asked: Growthify Media
CSS, which stands for Cascading Style Sheets, is used in web development to style and layout web pages. For example, while HTML can be used to structure content on the web, CSS is used to style this content. 
Let's assume there is an HTML element defined as:
<h1>Hello World</h1>
Using CSS, one can alter the appearance of this element, for instance:
h1 {
    color: blue;
    font-family: Arial, sans-serif;
    text-align: center;
}In this example, the CSS will style the "Hello World" text to appear blue, in Arial font, and centered on the webpage. This is a simple demonstration of how CSS can be utilized to control the presentation of HTML elements on a webpage.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is the correct syntax for font family?
The CSS font-family property specifies the font of an HTML element.
It can hold several font names as a fallback system. If the browser does not support the first font, it tries the next font.
Example: p {
  font-family: "Georgia", "serif";
} It is recommended to quote the font family names that contain white spaces, digits, or punctuation characters other than hyphens.
To avoid mistakes, we are giving quotes to all font family names.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What is the correct way to write fonts with sans serif as a fallback?
h1 {
  font-family: "Arial", "sans-serif";
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. How to import font-family in CSS?
To import a font family in CSS, we typically use the @import rule. 
If you're using Google Fonts, for example, you can follow these steps:
Go to Google Fonts.
Select the font you want to use.
Once you've selected the font, Google Fonts will provide you with an @import link that you can include in your CSS.
Here's a general example of how you can use the @import rule to import a font from Google Fonts:
@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
body {
    font-family: 'Roboto', sans-serif;
}
In the example above, the Roboto font is imported from Google Fonts, and then it's applied to the body element.
However, it's worth noting a few things:
Using @import at the top of your CSS can delay the loading of fonts. Some developers prefer to include the link to the font in the HTML <head> using a <link> tag to avoid this potential delay.
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. How can write font weight?
The CSS font-weight property allows us to adjust the thickness or weight of a font. 
we can use keywords like "bold" or "normal" to set the font weight or use the numerical values like 500, 600, etc., to specify the weight precisely.
Example: selector {
  font-weight: bold; /* Using a keyword */
}
another-selector {
  font-weight: 600; /* Using a numerical value */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What are the CSS text properties?
Some of the CSS text properties are:
color
text-align
text-decoration
direction
letter-spacing
text-shadow
text-transform
word-spacing
text-indent, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. How to align the button to the right without using the Bootstrap grid system?
Using CSS Flexbox properties
HTML 
<div class="division">
  <button>Button</button>
</div>
CSS
.division {
  display: flex;
  justify-content: flex-end;
}
Using CSS text-align property
<div class="division">
  <button>Button</button>
</div>
CSS
.division {
  text-align: right;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. How to center the text horizontally?
The CSS text-align property is used to set the horizontal alignment of a text.
We can use the CSS text-align property with the value center to center the text horizontally.
<p>Plan your trip.</p>
p {
  text-align: center;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. How do we underline the text in an HTML paragraph element?
The CSS text-decoration property with the value underline is used to underline the text in the HTML elements.
The CSS text-decoration property specifies the decoration added to the text.
Example: .paragraph {
  text-decoration: underline;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. How to apply background color and color for the HTML main heading element?
h1 {
  background-color: #eb8f34;
  color: #ffffff;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. What are the CSS Background properties?
The following are the CSS Background properties:
background-color
background-image
background-position
background-size
background-repeat
background-origin
background-clip
background-attachment, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
0. How to stop background image repeating for empty space?
We can use the CSS property background-repeat with the value no-repeat to stop repeating the background image.
Example .card {
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  background-repeat: no-repeat;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. Explain CSS background attachment property?
The CSS background-attachment property specifies the behaviour of the background image when the page is scrolled.
Values of the CSS background-attachment property are:
scroll : 	background image scrolls along with the HTML element.
fixed : 	background image doesn't scroll with the HTML element. It will be fixed with the viewport.
Example .card {
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  height: 100vh;
  background-attachment: fixed;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. Explain CSS background color property?
The CSS background-color property specifies the background color of an HTML element.
.card {
  background-color: lightblue;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. Explain CSS background image property?
The CSS background-image property specifies one or more background images of an HTML element.
Syntax:  body {
  background-image: url("image1.png"), url("image2.png");
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
14. What is a CSS Gradient?
CSS Gradient is a special type of Background Image formed by the transition between two or more colors.
There are mainly two types of gradients:
Linear Gradient
Radial Gradient
Linear Gradient
It is the most basic type of gradient. To create a gradient, we must have at least two colors.
Syntax: background-image: linear-gradient(direction, color1, color2);
By default, linear gradients run from top to bottom. You can change their transition by specifying a direction.
to top	: Colors transition (change) from bottom to top
to bottom	: It is a default direction. Colors transition (change) from top to bottom
to left	 : Colors transition (change) from right to left
to right: 	Colors transition (change) from left to right
Example: <div class="linear-gradient-background"></div>
.linear-gradient-background {
  background-image: linear-gradient(to right, #2196f3, #f44336);
  height: 100vh;
}
Radial Gradient : Radial Gradients radiate out from a central point.
Example: <div class="radial-gradient-background"></div>
.radial-gradient-background {
  background-image: radial-gradient(#2196f3, #f44336);
  height: 100vh;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What is the CSS box shadow property?
The CSS box-shadow property attaches one or more shadows to an HTML element. It accepts either the none value that indicates no shadows or a comma-separated list of shadows ordered front to back.
Specify a box-shadow using,
Two, three, or four length values.
If only two values are given, they are interpreted as offset-x and offset-y values.
If a third value is given, it is interpreted as a blur-radius.
If a fourth value is given, it is interpreted as a spread-radius.
Optionally, the inset keyword.
Optionally, a color value.
none	: Default value. No shadow is displayed
h-offset : 	(Required) It specifies the horizontal distance. A positive value puts the shadow on the right side of the box, a negative value puts the shadow on the left side of the box
v-offset : 	(Required) It specifies the vertical distance. A positive value puts the shadow below the box, a negative value puts the shadow above the box
blur : 	(Optional) It specifies the blur radius. The higher the number, the more blurred the shadow will be
spread : 	(Optional) The spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow
color : 	(Optional) It specifies the color of the shadow
inset : 	(Optional) If not specified (default), the shadow is a drop shadow (box seems raised above the content). If specified, the shadow is an inset shadow (shadows are drawn inside the border, above the background, but below content)
To see how the CSS box-shadow property varies with different values, please refer to the Box Shadow Generator.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. How to set the border style as dotted?
The CSS border-style property with the value dotted sets the border style of an HTML element as dotted.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What is the CSS border radius property?
The CSS border-radius property specifies the roundness of the four corners of an HTML element.
Example: .button {
  background-color: skyblue;
  border-radius: 20px;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. How to create a circular HTML button element using CSS?
We can create a circular HTML button element using the CSS property border-radius.
Apply the same width and height to the HTML button element
Apply the CSS border-radius property with the value 50% to the HTML button element.
Example:  .button {
  background-color: skyblue;
  width: 100px;
  height: 100px;
  border-radius: 50%;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What is the sequence of CSS margin properties?
The sequence of CSS margin properties is margin-top, margin-right, margin-bottom, margin-left
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What is the CSS box model?
The CSS box model is essentially a box that wraps around every HTML element. It consists of margin, border, padding, and the actual content.
box model
Content - The content of the box, where text and images appear. It represents the blue color in the above image.
Padding - A transparent space between the content and the border. It represents the green color in the above image.
Border - A borderline that goes around the padding and content. It represents the yellow color in the above image.
Margin - A transparent space outside the border. It represents the orange color in the above image.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What are the CSS Box properties?
The following are the CSS Box Properties:
height
width
border-style
border-width
border-color
margin
padding
----------------------------------------------------------------------------------------------------------------------------------------------------------
7. What is the CSS box sizing property?
The CSS box-sizing property sets how the total width and height of an element is calculated.
The values of the CSS box-sizing property are:
content-box: (Default) The width and height properties include only content, but they do not include the padding, border, or margin.
.container {
  width: 160px;
  height: 80px;
  padding: 20px;
  margin: 10px;
  border: 8px solid red;
  box-sizing: content-box;
  /* Total width: 160px + (2 * 20px) + (2 * 8px) = 216px
     Total height: 80px + (2 * 20px) + (2 * 8px) = 136px
     Content box width: 160px
     Content box height: 80px */
}
border-box: The width and height properties include the content, padding, and border, but they do not include the margin.
.container {
  width: 160px;
  height: 80px;
  padding: 20px;
  margin: 10px;
  border: 8px solid red;
  box-sizing: content-box;
  /* Total width: 160px
     Total height: 80px
     Content box width: 160px - (2 * 20px) - (2 * 8px) = 104px
     Content box height: 80px - (2 * 20px) - (2 * 8px) = 24px */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Explain media queries and why are they used?
Media queries play a crucial part while developing Responsive Layouts.
Using Media queries, we can conditionally apply styles based on the device type (e.g. printers, TVs, etc.) and media features (e.g. viewport width, etc.).
Syntax:  @media media-type and (media-feature-expression) {
  /* CSS rules go here */
}  Media Type: Media type describes the general category of devices. Possible types of media are screen, print, tv, all, etc.
 Media Feature: Using Media Features, we can write Media Query for a specific feature. Examples: width, height, orientation, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. How to apply background color for an HTML element in only small devices?
We can apply background color for an HTML element in only small devices using media queries with the media feature max-width.
Example: @media (max-width: 576px) {
  h1 {
    background-color: blue;
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. How to create a responsive website without Bootstrap?
We can create a responsive website using media queries or flexbox without Bootstrap.
11. How to hide the container (div) element on mobiles and show it on iPad and desktop?
We can hide the container (div) element in mobile and show it on iPad and desktop using Media Queries or Bootstrap.
Example: Using Media Queries 
div {
  display: none;
}
@media (min-width: 576px) {
  /*Assuming the tablet screen width is 576px.*/
  div {
    display: block;
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. What is a media type in a media query?
Media types describe the general category of devices.
Possible types of media are:
screen- For all Screened devices (mobiles, laptops, tablets, etc.)
print- For Printers.
tv- For Televisions.
all- Matches all types of devices and more...
Example: @media screen {
  .heading {
    color: green;
  }
} If the media type is not declared, it will default to all.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. What is the syntax for a CSS Media Query?
Syntax:   @media media-type and (media-feature-expression) {
   /* CSS rules go here */
}
Media types describe the general category of devices. Examples: screen, print, tv, all.
Media Features include features like width, height, orientation, etc.
We can combine multiple Media Features in a single Media Query using Logical Operators and the comma operator.
Example: Using comma operator
@media (orientation: landscape), (min-width: 600px) {
  .bg-container {
    background-color: yellow;
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. How to align the two HTML container (div) elements in a single row?
Making the HTML container elements as inline elements
Apply CSS display property with the value inline to both the HTML container (div) elements.
Making the HTML container elements as flex-items
Wrap the two HTML container elements in another container element. Apply CSS display property with the value flex to the parent element of two HTML container elements
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What is CSS Flexbox?
The CSS Flexbox is a layout method that helps to arrange the HTML elements in rows (horizontally) or columns (vertically).
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Why you are using Flexbox?
Flexbox provides an efficient way to layout, align, and distribute space among items in a container, even when their sizes are unknown or dynamic. This makes it a powerful tool for building complex layouts and UI components.
Flexbox allows for easier and cleaner tools for setting up layouts that respond to different screen sizes. With flexbox, I can ensure that elements behave predictably when the page layout must accommodate different screen sizes and display devices.
Flexbox provides properties like justify-content and align-items that offer a granular level of control over alignment and spacing, which was harder to achieve with older layout models.
With flexbox, I can easily change the visual order of elements without changing their order in the source code.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. How to align the HTML elements inside the container element in a row using the CSS flexbox properties?
We can align the HTML elements inside the container element in a row by:
Making the HTML container element as Flexbox container
Specifying the flex direction as a row to the HTML container element. (You can skip it as flex direction is row by default)
.container {
  display: flex;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. What is the CSS display property in Flexbox?
The CSS display property in Flexbox sets the layout of the children elements.
Providing display property with the value flex converts the element to a Flexbox Container. All the HTML elements that are direct children of Flexbox Container are called flex items.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. What are the CSS Flexbox properties?
Some of the CSS Flexbox properties are:
display
flex-direction
justify-content
align-items
flex-wrap
flex-flow
align-content
align-self
flex-grow
flex-basis
flex-shrink
order, etc.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. What is meant by the CSS justify content property?
The CSS justify-content property specifies the alignment of flex-items along the main axis.
The values of the CSS justify-content property are:
flex-start (default)	 : flex-items will arrange to the start of the flexbox container
center  : 	flex-items will arrange to the center of the flexbox container
flex-end	 : flex-items will arrange to the end of the flexbox container
space-between : 	Left-over space will be arranged in between the flex-items
space-around	 : Left-over space will be arranged around each flex-item
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. What is CSS flex property?
The CSS flex property specifies how a flex-item will grow or shrink according to the space available in its flexbox container.
It is a shorthand property for flex-grow, flex-shrink and flex-basis.
The CSS flex property may be specified using one, two, or three values.
flex: none /* value 'none' case */
flex: <'flex-grow'> /* One value syntax, variation 1 */
flex: <'flex-basis'> /* One value syntax, variation 2 */
flex: <'flex-grow'> <'flex-basis'> /* Two values syntax, variation 1 */
flex: <'flex-grow'> <'flex-shrink'> /* Two values syntax, variation 2 */
flex: <'flex-grow'> <'flex-shrink'> <'flex-basis'> /* Three values syntax */
Example: Using three values syntax
.container {
  flex: 0 1 1;
}
Common Values for CSS flex property are:
flex: 0 auto; (Default)	Same as flex: initial; and is shorthand for flex: 0 1 auto;
flex: auto;	Same as flex: 1 1 auto;
flex: none;	Same as flex: 0 0 auto;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. What are the uses of CSS Flexbox?
The CSS Flexbox allows us to have more control over the alignment and behaviour of boxes/divs/page elements when changing screen sizes or device orientation.
Some of the uses of CSS Flexbox are:
It sets flexible width/height of elements depending on available space.
It centers the elements in both vertical and horizontal without any hacks and workaround solutions.
It alters the order of elements inside the layout without affecting markup and document structure (using either order property or flex-flow).
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. Explain CSS Flexbox properties?
Some of the CSS Flexbox properties are:
Flex Direction: The CSS flex-direction property specifies the direction of the flex-items in the Flexbox Container.
The values of the CSS flex-direction property are:
row : 	Direction of the flex-items is horizontal
column : 	Direction of the flex-items is vertical
Justify Content: The CSS justify-content property specifies the alignment of flex-items along the main axis.
The values of the CSS justify-content property are:
flex-start (default) :	flex-items will arrange to the start of the flexbox container
center	: flex-items will arrange to the center of the flexbox container
flex-end :	flex-items will arrange to the end of the flexbox container
space-between :	Left-over space will be arranged in between the flex-items
space-around :	Left-over space will be arranged around each flex-item
Align Items: The CSS align-items property specifies the alignment of flex-items along the cross axis.
The values of the CSS align-items property are:
stretch (default)	: If the flex-direction is row, flex-items will stretch to their available height.
flex-start :	flex-items will be at the start of the flexbox container
center :	If the flex-direction is row, flex-items will be at the center of the available height in the flexbox container
flex-end :	If the flex-direction is row, flex-items will be at the end of the available height in the flexbox container
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What is the CSS display property?
The CSS display property is the most important property for controlling layout.
Using CSS display property,
HTML element can be converted to inline or block-level element
Layout for the children elements can be controlled
Values of the CSS display property are:
block
inline
flex
inline-flex
grid
none, etc.
Example:
.container {
  display: flex;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Explain CSS display property and its value inline-block?
The CSS display property with the value inline-block displays the HTML element as an inline-block container.
The inline-block container doesn't start on a new line but height and width can be applied to it.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What are the differences between display: none and visibility: hidden?
          display: none	                                                        visibility: hidden
1. It doesn't display the HTML element	                             1. It hides the HTML element (i.e cannot be seen in the layout/web page)
2. Space will not be allocated for an HTML element in the layout	      2. Space will be allocated for an HTML element in the layout
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. How to convert inline elements to block-level elements?
We can convert the inline elements to block-level elements using the CSS display property.
The CSS property display with the value block converts any HTML element to a block-level element.
.container {
  display: block;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Explain CSS display property with the values inline and block?
The CSS display property with the value block converts an HTML element to a block-level element.
The block-level element always starts on a new line.
It always takes up the full width available
The CSS display property with the value inline converts an HTML element to an inline element.
The inline element does not start on a new line.
It only takes up as much width as necessary.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. How can we layout the page for large screens and small screens?
We can build different layouts for large screens and small screens using:
Bootstrap Grid System
Media Queries
Flexbox, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. When do we use the CSS percentages?
To define the size of a child element relative to its parent element, we use CSS percentages.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. How do you rate yourself in CSS
I would rate myself as an intermediate in CSS. I'm proficient with basic selectors, flexbox, media queries, and various properties. However, I'm still learning about position utilities, animations, transitions, and certain CSS selectors. I'm committed to expanding my knowledge and improving my skills in these areas.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What is the CSS visibility property?
The CSS visibility property specifies the visibility of an HTML element.
Some of the values of the CSS visibility are:
visible :	shows the element
hidden :	hides the element but space will be allocated to the element in the HTML document
Example .container {
  visibility: hidden;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Difference between CSS and CSS3?
Rephrased Question: What is the difference between CSS and CSS3?
CSS is a language for styling HTML elements.
CSS3, the newest version of CSS, includes features like:
Media Queries for Responsive Design.
Animations and Transitions for dynamic effects.
Additionally, CSS3 is compatible with all modern browsers and supports multiple colour formats like RGBA and HSL, unlike CSS.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What is CSS Positioning?
The CSS position property defines the position of an HTML element in an HTML document. There are five values the CSS position property can take. They are:
static
relative
absolute
fixed
sticky
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What is the default value of the CSS position property?
The default value of the CSS position property is static.
This means that the HTML element is not affected by the top, bottom, left, and right CSS properties.
HTML
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <div class="box-orange"></div>
    <div class="box-blue"></div>
  </body>
</html>
CSS
.box-orange {
  background: orange;
  height: 100px;
  width: 100px;
}
.box-blue {
  /* Declared as static */
  background: blue;
  height: 100px;
  width: 100px;
  position: static;
}As the HTML elements are positioned as static by default, the elements that we explicitly mention the position static and doesn't mention the position property at all behave the same.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. If an HTML container (div) element and an HTML paragraph element is given. How will you move HTML paragraph element to top left corner?
We can move the HTML paragraph element to top-left corner by applying,
CSS position property with value fixed or absolute to HTML paragraph element.
CSS top property and CSS left property with value 0 to HTML paragraph element.
HTML
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <div class="box"></div>
    <p class="paragraph">Tourism</p>
  </body>
</html>
CSS
.box {
  background-color: orange;
  width: 100px;
  height: 100px;
}
.paragraph {
  position: absolute;
  top: 0;
  left: 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What are the differences between relative positioning and absolute positioning?
relative	: 1) HTML element is positioned from its default place	, 2) The default place of the HTML element remains in the flow of the document
absolute : 1) HTML element is positioned from the closest parent element which has position property other than static. If there is no positioned parent element, it is positioned from the viewport.
	2) The HTML element is removed from the flow of the document and other elements will behave as if it’s not present.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What are the differences between fixed positioning and absolute positioning?
fixed	 : 1) HTML element is positioned from the viewport 2) The HTML element does not move when the page is scrolled. 3) The HTML element is removed from the flow of the document and other elements will behave as if it’s not present.
absolute : 1)	HTML element is positioned from the closest parent element which has position property value other than static. If there is no positioned parent element, it is positioned from the viewport.
	2) The HTML element moves when the page is scrolled. 3) 	The HTML element is removed from the flow of the document and other elements will behave as if it’s not present.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are the differences between fixed positioning and sticky positioning?
The sticky positioned elements will initially behave like position: relative elements, but if you keep scrolling, they will get taken out of the normal flow and behave like position: fixed wherever you have positioned them in their parent element.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Explain the different types of CSS Selectors?
The different types of CSS Selectors are:
Simple Selectors
Class Selector
ID Selector
Type (tag name) Selector
Universal Selector
Attribute Selector
Pseudo-classes
Pseudo-elements
Combinators
Simple Selectors
Selector	Description
Type(Tag name)	Selects all the elements of a given type(tag name)
Class	Selects all the elements of a given class name
ID	Selects all the elements of a given id
Universal	Selects all the elements in an HTML document
Attribute Selector
The CSS Attribute Selector is used to select the HTML elements of a specified attribute or a specified attribute and value.
With Attribute name
Examples:a[title] {
  ...
}
With both Attribute name and value
Example a[href="https://example.com"]
{
  ...
}
Pseudo-classes
A CSS pseudo-class specifies a special state of the selected elements. Some of the CSS Pseudo-classes are :hover, :visited, :focus, etc.
Example: a:visited {
  ...
}
Pseudo-elements
A CSS Pseudo-element is used to style a specific part of the selected element. Some of the CSS Pseudo-elements are ::before, ::after, ::first-line, etc.
Example:  p::first-letter {
  color: skyblue;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. What are CSS Pseudo-classes?
A CSS pseudo-class specifies a special state of the selected elements.
A pseudo-class can't exist on its own. It must be attached to a CSS selector. The pseudo-class will only define a particular state of that selector.
Syntax:  .selector:pseudo-class {
  /*There is no space between the selector and the pseudo-class*/
  ...
}
Some of the common CSS Pseudo-classes are:
Pseudo-class	         Description
:hover	             CSS properties will be applied if the selected element has hovered
:visited	           CSS properties will be applied if the link is visited
:focus	             CSS properties will be applied if the selected element is focused
:first-child	       CSS properties will be applied if the selected element is first of its siblings
:last-child	         CSS properties will be applied if the selected element is the last of its siblings
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. What are CSS Pseudo-elements?
A CSS Pseudo-element is used to style a specific part of the selected element.
For example, it can be used to:
Style the first letter or first line of an HTML element
Insert content before or after the content of an HTML element
Syntax:  selector::pseudo-element {
  property: value;
}
Some of the common CSS Pseudo-elements are:
Pseudo-element	           Description
::first-line	           CSS properties will be applied to the first line of the content in the selected element
::first-letter	       CSS properties will be applied to the first letter of the content in selected element
::before	             Content will be inserted before the content of a selected element
::after	              Content will be inserted after the content of a selected element
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. How to apply CSS Properties by child number?
We can apply CSS properties by child number using the CSS nth-child selector.
The CSS :nth-child() pseudo-class selects the HTML elements based on the position among their siblings.
Example: p:nth-child(2) {
  color: green;
}
:nth-child() takes a single argument. It might be a number or keyword (even, odd) or formula (2n).
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. How to style the visited and unvisited links using CSS?
We can style the visited and unvisited links with the CSS pseudo-classes :link and :visited.
Unvisited links: Using :link or other selectors like tag, class name, etc.
a:link {
  color: red;
}
Visited links: Using :visited
a:visited {
  color: green;
}
All the visited links will be in green color whereas all unvisited links are in red color.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Do you know the before and after in CSS?
In CSS, ::before and ::after are known as pseudo-elements. They are used to add decorative content to an element. The content is inserted before or after the content of the element.
Here's a simpler explanation:
::before: This pseudo-element inserts content before the content of the selected element.
::after: This pseudo-element inserts content after the content of the selected element.
Let's consider an example. Suppose we have a paragraph <p> in our HTML:
<p>Hello, World!</p>
Now, we want to add some content before and after the text of this paragraph. We can use ::before and ::after in our CSS like this:
p::before {
  content: "Start: ";
}
p::after {
  content: " :End";
}
With this CSS, our paragraph will look like this on the webpage:
Start: Hello, World! :End
So, "Start: " is added before the paragraph content and " :End" is added after the paragraph content. But in the actual HTML code, the paragraph is still the same. This is why they are called pseudo-elements. They don't actually alter the HTML element itself, they just create the illusion that the extra content is part of the element.
The content property is mandatory with ::before and ::after. If you don't use the content property, nothing will happen. The content property can have an empty string like "", or it can contain text, an image, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. How to wrap a block of text around the HTML image element?
We can wrap a block of text around the HTML image element using the CSS float property.
Some of the values of the CSS float property are:
Value	            Description
none	           (Default value) The element does not float (will be displayed just where it occurs in the text)
left	           The element floats to the left of its container
right	           The element floats to the right of its container
Example: img {
  float: right;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Explain CSS Background Properties?
The CSS background properties let us control the size and properties of background images/colors.
Some of the CSS background properties are:
background-image
background-size
background-repeat
background-position
background-origin
background-clip
background-attachment
background-color
background (Short hand)
Background Image
The CSS background-image property sets one or more background images on an HTML element.
Example: div {
  background-image: url("image1.png"), url("image2.png");
}
Background Size : The CSS background-size property sets the size of the background image of an HTML element.
Some of the values of CSS background-size property are:
Value	             Description
cover	       :    Scales the image to the smallest size while maintaining the same aspect ratio (width/height) and covers the entire width and height even if the image is cropped or stretched
contain	     :   Scales the image to the largest size while maintaining the same aspect ratio (width/height) and shows the whole image, even if that leaves a little space to the sides or bottom
percentage	 : Sets the width and height of the background image with respect to the parent element. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto". Example: "50% 50%"
Example: div {
  background-image: url("image1.png");
  background-size: cover;
}  Background Repeat
The CSS background-repeat property sets how a background image is repeated.
Some of the values of CSS background-repeat property are:
Value	      Description
repeat	  :  (Default value) The background image is repeated both vertically and horizontally. The last image will be clipped if it does not fit.
no-repeat	 :  The background image is not repeated. The image will only be shown once.
Example: div {
  background-image: url("image1.png");
  background-repeat: no-repeat;
}
Background Position
The CSS background-position property sets the initial position for the background image.
Example: div {
  background-image: url("image1.png");
  background-position: right;
}Background Origin
The CSS background-origin property specifies the origin of the background image/ what the CSS background-position property is relative to.
Some of the values of CSS background-origin property are:
Value	          Description
padding-box	 : (Default value) The background position of the image is relative to the padding box
border-box :	 The background position of the image is relative to the border box
content-box	:  The background position of the image is relative to the content box
.card {
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  height: 100vh;
  background-position: right;
  background-origin: padding-box;
}
Background Clip
The CSS background-clip property specifies how far the background should extend within an HTML element.
Some of the values of the CSS background-clip property are:
Value	           Description
border-box :	 (Default value) The background extends behind the border
padding-box	:  The background extends to the inside edge of the border
content-box	:  The background extends to the edge of the content box
.card {
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  height: 100vh;
  background-clip: content-box;
}
Background Attachment
The CSS background-attachment property specifies the behaviour of the background image when the page is scrolled.
Values of the CSS background-attachment property are:
Value	      Description
scroll	: background image scrolls along with the HTML element.
fixed	:   background image doesn't scroll with the HTML element. It will be fixed with the viewport.
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  height: 100vh;
  background-attachment: fixed;
}
Background Color
The CSS background-color property specifies the background color of an HTML element.
.card {
  background-color: skyblue;
  height: 100vh;
}
Background
The CSS background property sets all background style properties at once, such as color, image, origin and size, or repeat method.
It is a shorthand property for the below CSS properties:
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
.card {
  background: lightblue url("IMAGE_URL") no-repeat fixed center;
  height: 100vh;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. What is the CSS direction property?
The CSS direction property sets the direction of text, table columns, and horizontal overflow in an HTML block-level element.
Some of the values of CSS direction property are:
Value	     Description
ltr	      (Default value) Text and other elements go from left to right
rtl	       Text and other elements go from right to left
Example: .card {
  direction: rtl;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. How to align the last line of a text?
The CSS text-align-last property specifies the horizontal alignment of the last line of a text in an HTML element.
Value	     Description
center	   Aligns the last line of a text to the center
left	    Aligns the last line of a text to the left
right	   Aligns the last line of a text to the right
Example:  .h-last-center {
  text-align-last: center;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. How to add inner shadows to an HTML element?
The CSS box-shadow property adds shadow to an HTML element.
By default, the shadow is a drop shadow (shadow seems raised above the content).
To add an inner shadow, we need to specify the inset keyword along with the other values like h-offset, v-offset, etc.
Example: .container {
  box-shadow: inset 0 0 10px #000000;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Do you know about parallax effect?
Yes. The parallax effect adds a 3D-like effect to web pages. It makes the background content scroll at a different speed than the main content.
The CSS background-attachment property with value fixed can be used to create a basic parallax effect. This makes the background fixed while all the other elements move when scrolled.
A combination of CSS and JS can be used, for complex parallax effects like moving multiple backgrounds at different speeds.
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <div>
      <h1>Parallax effect</h1>
    </div>
    <div class="parallax"></div>
    <div class="content">
      <h1>This is your content</h1>
      <p>Scroll up and down to see the parallax effect.</p>
    </div>
  </body>
</html>
CSS
.parallax {
  background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/tajmahal-c1-img.png");
  min-height: 800px;
  /* Create the parallax scrolling effect */
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
.content {
  height: 1500px; /* Should be greater than parallax container to enable scrolling */
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. What are CSS custom properties?
A CSS custom property is most commonly thought of as a variable in CSS.
It is set using a custom property notation (e.g.--main-color: black;) and are accessed using the var() function (e.g. color: var(--main-color);).
.card {
  --spacing: 2px;
  padding: var(--spacing);
  margin-bottom: var(--spacing);
}
Note : If the custom property has to be accessed through the entire HTML document, declare it inside the :root pseudo-class.
:root {
  --main-bg-color: brown;
}
.card-1 {
  color: white;
  background-color: var(--main-bg-color);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. What is the CSS display property with the value inline-flex?
It is similar to the CSS display property with the value flex.
Both convert the HTML element to a flex container. But the value inline-flex also converts the element (flex container) to an inline element.
Example:  .box {
  display: inline-flex;
}Here the flex container doesn't start on a new line and takes only the content width.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. How to create animations using CSS?
Companies Asked: Growthify Media
To create animations using CSS, you can use the @keyframes rule along with CSS properties like animation-name, animation-duration, and animation-timing-function. Here's a brief explanation with an example:
First, define your animation using @keyframes: 
@keyframes slide-in {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
} 
Next, apply the animation to an element using the animation property:
.element-to-animate {
  animation-name: slide-in;
  animation-duration: 1s;
  animation-timing-function: ease;
  animation-fill-mode: forwards;
}
In this example, we've created a simple animation called "slide-in" that moves an element from left to right. The animation-name property specifies the name of the animation defined with @keyframes. animation-duration sets the duration of the animation, and animation-timing-function defines the timing function for the animation. The animation-fill-mode property ensures that the element retains its final state after the animation completes.
You can further customize animations by adjusting these properties and adding other animation-related properties like animation-delay or animation-iteration-count as needed.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Explain what is Bootstrap and its importance?
Bootstrap is a large collection of predefined reusable Code Snippets written in HTML, CSS, and Javascript. The Code Snippets include Buttons, Cards, Carousels, etc.
It is created by Twitter
It is currently used by companies like Twitter, LinkedIn, Spotify, Udemy, etc.
More than 20 million websites are built using Bootstrap till now.
Importance of Bootstrap:
Bootstrap can be used to develop desktop and mobile applications. There is a built-in capability to resize the app automatically, making it smooth to move from a website to a mobile app.
Bootstrap includes HTML and CSS-based design templates for typography, forms, buttons, tables, navigation, modals, image carousels, etc.
The user interface is easy to use and built using Bootstrap.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What are the advantages of Bootstrap?
Some of the advantages of Bootstrap are:
Time Saving: Bootstrap provides predefined reusable code snippets which makes us not build everything from scratch.
Consistency: Bootstrap provides consistent output across all the browsers. It also solves inconsistencies between designers and developers.
Customizable: Bootstrap themes and templates can be customized as per our project requirement.
Cross-browser Compatible: Bootstrap is compatible with all the latest versions of browsers.
Easy to Use: Bootstrap is very simple to use. The setup process doesn't take too long and is relatively easy, even for beginners.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. How to use Bootstrap code snippets?
To use the Code Snippets provided by Bootstrap, we need to add a piece of code within the HTML head element. We call it Bootstrap CDN.
<!DOCTYPE html>
<html>
  <head>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"
      crossorigin="anonymous"
    />
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
      integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
      integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <button class="btn btn-primary">Get Started</button>
    <button class="btn btn-secondary">Get Started</button>
  </body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Who Developed The Bootstrap?
The Bootstrap is developed by Mark Otto and Jacob Thornton at Twitter.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Why Bootstrap is preferred for website development?
Bootstrap has better features as compared to other web development platforms.
It provides predefined reusable code snippets that enable the web developer to create a new website quickly. No need to do code from scratch.
It provides extensive browser support for almost every known browser such as Opera, Chrome, Firefox, Safari, etc.
It supports mobile applications with the help of responsive design and can adjust CSS as per the device, screen size, etc.
It has a Massive Support Community that helps web developers when an issue occurs.
Bootstrap provides JavaScript plugins that add more interaction to the website.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What does the Bootstrap package include?
The Bootstrap package includes,
Scaffolding: Bootstrap provides a basic structure with Grid System, link styles, and background.
CSS: Bootstrap comes with the feature of global CSS settings, fundamental HTML elements style and an advanced grid system.
Components: Bootstrap contains a lot of reusable components to provide iconography, dropdowns, navigation, alerts, pop-overs, and much more.
JavaScript Plugins: Bootstrap also contains a lot of custom JavaScript plugins. We can easily include them all, or one by one.
Customize: Bootstrap components are customizable and we can customize Bootstrap's components to get our own style.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. What are the differences between Bootstrap and Foundation?
Some of the differences between Bootstrap and Foundation are:
Bootstrap	                                                          Foundation
Bootstrap offers an unlimited number of UI elements.	             In Foundation UI element options are very limited.
Bootstrap uses pixels.	                                            Foundation uses REMs.
Bootstrap is easy to use	                                        Foundation is not great for beginners compared to Bootstrap
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What are the different button styles in Bootstrap 4?
Some of the button styles in Bootstrap 4 are:
Button Styles	                                         Class names
Buttons with different colors	                    btn-primary, btn-secondary, etc
Outline buttons with different colors  	          btn-outline-primary, btn-outline-secondary, etc.
Buttons with different sizes (Small, large)	     btn-sm, btn-lg
Block-level buttons	                              btn-block
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Design two HTML buttons, success and danger, using Bootstrap class names.
<button class="btn btn-success">Get Started</button>
<button class="btn btn-danger">Get Started</button>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. How to add an HTML button and style it using Bootstrap to the existing HTML document?
Add the HTML button element in the HTML body element.
Include the Bootstrap CDN in the HTML head element.
Add the Bootstrap button class names to the HTML button element.
<button class="btn btn-success">Get Started</button>
------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What are the types of lists supported by Bootstrap?
Bootstrap supports all three types of lists, ordered (ol), unordered(ul) and description(dl) lists.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What is a Carousel?
The Carousel is a slideshow for cycling through images, text, etc. Slides will change for every few seconds.
We can add the different images in the Carousel by changing the image URL in the value of the HTML src attribute.
Bootstrap carousels support previous/next controls and indicators, etc.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Which of the following is not the Bootstrap background class name?
a. bg-info
b. bg-primary
c. bg-danger
d. bg-error
Answer: Option D - bg-error
------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What are Contextual classes of table in Bootstrap?
.active: Applies the hover color to a particular row or cell.
.success: Indicates a successful or positive action.
.warning: Identifies a warning that might need attention.
.danger: Indicates a dangerous or potentially negative action.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. How do you use Bootstrap to make a page responsive?
We can make a page responsive by using the Bootstrap Grid System which helps us to create columns and rows to build a responsive layout of the page.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What is the Bootstrap grid system?
Bootstrap Grid System is a collection of reusable code snippets to create responsive layouts. It is made up of containers, rows, and columns.
It uses a 12 column system for the layouting. We can create up to twelve columns across the page.
Container : The purpose of a container is to hold rows and columns.
Row : The purpose of a row is to wrap all the columns.
Column : We should place the columns inside a row and the content inside a column.
We can specify the number of columns our content should occupy in any device. The number of columns we specify should be a number in the range of 1 to 12.
The Bootstrap class names col-* indicates the number of columns you would like to use out of the possible twelve columns per row. For example, col-1, col-5, etc.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Can a 14 or 16 column grid system be made?
Bootstrap supports the customization of Bootstrap grid class names.
The number of grid columns can be modified by Sass variables. Sass variables are similar to the JS variables where we used to store the information.
$grid-columns is used to generate the widths (in percent) of each column
$grid-gutter-width sets the padding between the columns.
Example  $grid-columns: 12 !default;
         $grid-gutter-width: 30px !default;
--------------------------------------------------------------------------------------------------------------------------------------------------------
4. What is col and span in Bootstrap?
col means column in Bootstrap. Bootstrap Grid System allows up to 12 columns across the page and each column is represented as a span.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
5. What is a Bootstrap Container?
The container is the most basic layout class name in Bootstrap and is required when using the Bootstrap Grid System.
The purpose of a container is to hold rows and columns.
Bootstrap comes with three different containers:
.container: It is a responsive, fixed-width container. Its max-width changes at each breakpoint.
.container-fluid: It is a full-width container spanning the entire width of the viewport. (width: 100%)
.container-{breakpoint}: It is 100% wide until the specified breakpoint. For higher breakpoints, it takes the max-width.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
6. What are the Bootstrap class names for different breakpoints?
Bootstrap Grid Columns
Bootstrap provides different Bootstrap Grid Column class name prefixes for Five Responsive Tiers (Responsive Breakpoints).
Device	              Device Size (Width)	      Class Name Prefix
Extra small devices	     <576px	                    col-
Small devices	           >=576px	                col-sm-
Medium devices	         >=768px	                col-md-
Large devices	           >=992px	                col-lg-
Extra large devices	     >=1200px	                col-xl-
Display Utilities : Examples: d-none, d-sm-none, d-md-none, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
7. What are the predefined class names of margin and padding in Bootstrap?
Margin Bootstrap class names	                          Padding Bootstrap class names
m-*, mt-*, mr-*, mb-*, ml-*	                             p-*, pt-*, pr-*, pb-*, pl-*
The asterisk (*) symbols can be any number in the range of 0 to 5 or auto.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
1. What is Flexbox Utility in Bootstrap?
The Flexbox utilities in Bootstrap makes us quickly manage the layout, alignment, and sizing of grid columns, components, etc.
Some of the Flexbox utility class names in Bootstrap are:
The .d-flex class name enables the flex behaviours.
Flexbox property	                   Class Names
flex-direction	              flex-row, flex-column, etc.
justify-content	            justify-content-start, justify-content-end, justify-content-center, justify-content-between, justify-content-around, etc.
align-items	                align-items-start, align-items-end, align-items-center, align-items-baseline, align-items-stretch, etc.
align-self	               align-self-start, align-self-end, align-self-center, align-self-baseline, align-self-stretch, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Explain the Bootstrap class names d-none and d-block ?
Class Name	           Description
d-none	             Doesn't display an HTML element and doesn't take any space in the HTML document.
d-block	             Displays an HTML element
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS 
1️⃣ Box Model in CSS
🔹 What is the CSS Box Model? : The CSS Box Model is the fundamental concept that defines how elements are structured and spaced on a webpage. Every HTML element is a rectangular box with four main parts:
Content – The actual content (text, image, etc.).
Padding – Space between the content and the border.
Border – A line surrounding the element.
Margin – Space outside the border that separates elements.
When to use CSS Padding:
To specify the space around the four sides of the content of an HTML element.
To add the space between the content and border of an HTML element.
When to use CSS Margin:
To specify the space around the four sides of an HTML element.
To add the space between HTML elements.
✅ Box Model Structure
css
.box {
    width: 200px;
    height: 100px;
    padding: 10px;
    border: 5px solid black;
    margin: 20px;
}
🔹 Visual Representation
[Margin]
  [Border]
    [Padding]
      [Content]
✅ Example: Box Model in Action
html
<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        .box {
            width: 200px;
            height: 100px;
            padding: 20px;
            border: 5px solid red;
            margin: 30px;
            background-color: lightblue;
        }
    </style>
</head>
<body>
    <div class="box">This is a box</div>
</body>
</html>
🔹 Effect: The box will have content, padding, border, and margin properly spaced.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS Selectors : CSS Selectors allow you to select and style HTML elements. Here are some common types with examples:
Element Selector: Targets all instances of a specific HTML tag.
css
p {
    color: blue;
}
-------------------------------------------------------------------------------------
Class Selector: Targets elements with a specific class attribute.
css
.classname {
    background-color: yellow;
}
------------------------------------------------------------------------------
ID Selector: Targets a single element with a specific ID attribute.
css
#idname {
    font-size: 20px;
}
-----------------------------------------------------------------------------------
Attribute Selector: Targets elements with a specific attribute.
css
input[type="text"] {
    border: 2px solid green;
}
----------------------------------------------------------------------------------
Pseudo-class Selector: Targets elements based on their state or position.
css
a:hover {
    color: red;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS Layout : CSS Layout defines how elements are arranged on a webpage. Let's explore inline, inline-block, and block elements:
Inline : Inline elements do not start on a new line and take up only as much width as necessary. They ignore the width and height properties.
Example:
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inline Example</title>
    <style>
        .inline {
            color: red;
        }
    </style>
</head>
<body>
    <span class="inline">This is inline.</span>
    <span class="inline">Another inline element.</span>
</body>
</html>
Inline-block
Inline-block elements are like inline elements but can have width and height properties. They allow elements to sit next to each other with defined sizes.
Example: 
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inline-block Example</title>
    <style>
        .inline-block {
            display: inline-block;
            width: 100px;
            height: 50px;
            background-color: yellow;
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="inline-block">Block 1</div>
    <div class="inline-block">Block 2</div>
</body>
</html>
Block : Block elements start on a new line and take up the full width available.
Example:
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Block Example</title>
    <style>
        .block {
            display: block;
            width: 100%;
            background-color: lightblue;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="block">Block 1</div>
    <div class="block">Block 2</div>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Responsive Website
Creating a responsive website ensures that your site looks great on all devices, from mobile phones to desktop monitors.
Media Query : Media queries allow you to apply styles based on the device's characteristics, like screen size or resolution.
css
/* Example of a media query */
@media only screen and (max-width: 600px) {
  body {
    background-color: lightblue;
  }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Bootstrap : Bootstrap is a popular CSS framework that makes it easy to create responsive designs.
To start using Bootstrap, you need to include it in your HTML file:
html
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
Bootstrap's grid system uses containers, rows, and columns to layout and align content.
html
<div class="container">
  <div class="row">
    <div class="col-sm">
      Column 1
    </div>
    <div class="col-sm">
      Column 2
    </div>
    <div class="col-sm">
      Column 3
    </div>
  </div>
</div>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Flexbox : Flexbox is a layout module that makes it easier to design flexible and responsive layout structures.
html
<style>
  .flex-container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }
  .flex-item {
    background-color: lightgrey;
    padding: 10px;
    margin: 5px;
  }
</style>
<div class="flex-container">
  <div class="flex-item">Item 1</div>
  <div class="flex-item">Item 2</div>
  <div class="flex-item">Item 3</div>
</div>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Z-Index : The z-index property specifies the stack order of elements. Elements with a higher z-index are displayed in front of those with a lower z-index.
html
<style>
  .box {
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: red;
  }
  .box1 {
    left: 50px;
    top: 50px;
    z-index: 1;
  }
  .box2 {
    left: 70px;
    top: 70px;
    z-index: 2;
    background-color: blue;
  }
</style>
<div class="box box1"></div>
<div class="box box2"></div>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Position Property : The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute, or sticky).
Absolute : The element is positioned relative to its nearest positioned ancestor.
html
<style>
  .absolute {
    position: absolute;
    left: 50px;
    top: 50px;
  }
</style>
<div class="absolute">I am absolutely positioned</div>
--------------------------------------------------------------------------------------------------------------------
Fixed : The element is positioned relative to the browser window.
html
<style>
  .fixed {
    position: fixed;
    bottom: 0;
    right: 0;
  }
</style>
<div class="fixed">I am fixed positioned</div>
----------------------------------------------------------------------------------------------------
Relative : The element is positioned relative to its normal position.
html
<style>
  .relative {
    position: relative;
    left: 30px;
  }
</style>
<div class="relative">I am relatively positioned</div>
-----------------------------------------------------------------------------------------------------------------------------------
Static : The default position for HTML elements. Elements are positioned according to the normal flow of the document.
html
<style>
  .static {
    position: static;
  }
</style>
<div class="static">I am statically positioned</div>
------------------------------------------------------------------------------------------------------------
Float : The float property is used for positioning and formatting content. It allows an element to be pushed to the left or right, allowing other elements to wrap around it.
html
<style>
  .float {
    float: right;
    width: 100px;
  }
</style>
<img src="image.jpg" class="float" alt="Floating Image">
<p>This text will wrap around the floating image.</p>
----------------------------------------------------------------------------------------------------------------
Bootstrap
Advantages
Responsive Design: Easily create responsive layouts.
Consistency: Ensures design consistency across different platforms.
Customizable: You can customize Bootstrap to fit your project's needs.
Predefined Styles: Provides a wide range of pre-styled components.
------------------------------------------------------------------------------------------------------------------------------
Bootstrap Grid System : The Bootstrap grid system divides the page into a 12-column layout that adapts to the screen size and orientation.
html
<div class="container">
  <div class="row">
    <div class="col-sm-4">Column 1</div>
    <div class="col-sm-4">Column 2</div>
    <div class="col-sm-4">Column 3</div>
  </div>
</div>
-------------------------------------------------------------------------------------------------------------
Predefined Classes for Bootstrap : Bootstrap includes many predefined classes for styling elements.
html
<button class="btn btn-primary">Primary Button</button>
<div class="alert alert-success">Success Alert</div>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>
</nav>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1️⃣ Specificity
Detailed Explanation:
Specificity determines the priority of CSS rules when multiple rules apply to the same element. It calculates based on the type of selector:
Inline styles have the highest specificity.
ID selectors are more specific than class selectors.
Universal (*) selectors have the lowest specificity.
html
<style>
    h1 { color: blue; } /* Specificity = 1 */
    .title { color: green; } /* Specificity = 10 */
    #main-title { color: red; } /* Specificity = 100 */
</style>
<h1 id="main-title" class="title">Specificity Example</h1>
How It Works:
h1 has a specificity of 1.
.title (class) has a specificity of 10.
#main-title (ID) has a specificity of 100.
🔹 The ID selector (#main-title) overrides all others because it has the highest specificity.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS Grid Layout is a powerful layout system in CSS that provides a grid-based framework for web pages, allowing you to create complex and responsive layouts with ease. It allows you to define rows and columns and place items within this grid.
Key Concepts of CSS Grid:
Grid Container: An element with display: grid or display: inline-grid.
Grid Items: The direct children of the grid container.
Grid Lines: The dividing lines that make up the structure of the grid.
Grid Tracks: The space between two adjacent grid lines (rows or columns).
Grid Cells: The single unit of the grid, defined by the intersection of a row and a column.
Grid Areas: A rectangular area spanning multiple grid cells.
Basic Example
Let's start with a simple example to illustrate the CSS Grid layout.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Grid Example</title>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            background-color: #f0f0f0;
            padding: 20px;
        }
        .grid-item {
            background-color: #333;
            color: #fff;
            padding: 20px;
            text-align: center;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="grid-item">1</div>
        <div class="grid-item">2</div>
        <div class="grid-item">3</div>
        <div class="grid-item">4</div>
        <div class="grid-item">5</div>
        <div class="grid-item">6</div>
    </div>
</body>
</html>
Explanation
Grid Container: The .grid-container class is set to display: grid, turning it into a grid container.
Grid Template Columns: grid-template-columns: repeat(3, 1fr); creates three equal-width columns in the grid.
Gap: gap: 10px; sets the space between grid items.
Grid Items: Each child of the grid container (.grid-item) will be placed into a grid cell.
Advanced Example
Let's explore some more advanced features of CSS Grid, such as defining specific rows and columns, and placing items within specific areas.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced CSS Grid Example</title>
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            grid-template-rows: auto;
            gap: 10px;
            background-color: #f0f0f0;
            padding: 20px;
        }
        .header {
            grid-column: 1 / 4;
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 20px;
            border-radius: 10px;
        }
        .sidebar {
            grid-column: 1 / 2;
            background-color: #666;
            color: #fff;
            padding: 20px;
            border-radius: 10px;
        }
        .content {
            grid-column: 2 / 4;
            background-color: #999;
            color: #fff;
            padding: 20px;
            border-radius: 10px;
        }
        .footer {
            grid-column: 1 / 4;
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 20px;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <div class="header">Header</div>
        <div class="sidebar">Sidebar</div>
        <div class="content">Content</div>
        <div class="footer">Footer</div>
    </div>
</body>
</html>
Explanation
Grid Template Columns: Defines three columns with different widths (1fr 2fr 1fr), meaning the middle column will be twice as wide as the other two.
Grid Column: The .header element spans all three columns (grid-column: 1 / 4), the .sidebar spans the first column, the .content spans the second and third columns, and the .footer spans all three columns.
CSS Grid is a versatile and powerful layout system that allows for complex and responsive web designs with minimal code. It provides more control over layout compared to older techniques like floats and inline-block.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4️⃣ Pseudo-classes in CSS are keywords added to selectors that specify a special state of the selected elements. They are useful for applying styles to elements based on their dynamic state or user interaction.
Commonly Used Pseudo-Classes
:hover - Styles an element when the user hovers over it with a pointer device.
css
a:hover {
    color: red;
}
:active - Styles an element when it is being activated by the user (e.g., clicked).
css
a:active {
    color: green;
}
:focus - Styles an element when it has received focus (e.g., when a user clicks on an input field).
css
input:focus {
    border-color: blue;
}
:visited - Styles a link after it has been visited.
css
a:visited {
    color: purple;
}
:nth-child(n) - Styles elements based on their position in a parent element.
css
li:nth-child(odd) {
    background-color: #f0f0f0;
}
:first-child - Styles the first child element of a parent.
css
p:first-child {
    font-weight: bold;
}
:last-child - Styles the last child element of a parent.
css
p:last-child {
    font-style: italic;
}
:not(selector) - Styles elements that do not match the given selector.
css
input:not([type="submit"]) {
    border: 1px solid #ccc;
}
Example
Let's see an example that uses several pseudo-classes to style a simple list and form elements.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pseudo-Classes Example</title>
    <style>
        /* Style list items with pseudo-classes */
        li:nth-child(odd) {
            background-color: #f0f0f0;
        }
        li:hover {
            background-color: yellow;
        }
        /* Style form elements with pseudo-classes */
        input:focus {
            border-color: blue;
        }
        input:active {
            background-color: #e0e0e0;
        }
        a:visited {
            color: purple;
        }
    </style>
</head>
<body>
    <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
        <li>Item 4</li>
    </ul>
    <form>
        <label for="name">Name:</label>
        <input type="text" id="name" name="name"><br><br>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email"><br><br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
Explanation
List Items: Odd list items are given a different background color using the :nth-child(odd) pseudo-class. When you hover over any list item, it changes color.
Form Elements: The :focus pseudo-class changes the border color of input fields when they are focused. The :active pseudo-class changes the background color of the input fields when they are clicked.
Pseudo-classes are very powerful in CSS and allow for dynamic and interactive styling of elements.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5️⃣ Font Face
The @font-face rule in CSS allows you to define custom fonts that can be used on your web pages. This means you can use fonts that are not pre-installed on the user's device, and you can ensure a consistent look and feel across different platforms and browsers.
Syntax
Here's the basic syntax of the @font-face rule:
css
@font-face {
    font-family: 'YourFontName';
    src: url('path-to-your-font.woff2') format('woff2'),
         url('path-to-your-font.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}
Attributes
font-family: The name you want to give to your font. You will use this name in your CSS to apply the font to elements.
src: The location (URL) of your font file. You can specify multiple formats for better browser support.
font-weight: Defines the weight (thickness) of the font.
font-style: Specifies the style of the font (e.g., normal, italic).
Example
Let's see a practical example of using @font-face to include and apply a custom font on a webpage.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@font-face Example</title>
    <style>
        @font-face {
            font-family: 'MyCustomFont';
            src: url('fonts/mycustomfont.woff2') format('woff2'),
                 url('fonts/mycustomfont.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        body {
            font-family: 'MyCustomFont', sans-serif;
        }
    </style>
</head>
<body>
    <h1>Hello, World!</h1>
    <p>This is a paragraph with a custom font.</p>
</body>
</html>
Explanation
The @font-face rule is defined within the <style> tag in the HTML document's <head>.
In the src attribute, we specify the paths to the custom font files (both .woff2 and .ttf formats for better compatibility).
We use the custom font by setting the font-family property in the CSS for the body tag.
Using @font-face allows you to use unique and custom fonts on your website, giving you more design flexibility. Just make sure you have the legal right to use the fonts and that you provide the necessary font files in the correct formats.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6️⃣ Viewport Height/Width
Detailed Explanation:
vh and vw are units that represent a percentage of the viewport dimensions.
css
.fullscreen {
    width: 100vw;
    height: 100vh;
    background-color: lightblue;
}
How It Works:
100vw : Width equals 100% of the viewport width.
100vh : Height equals 100% of the viewport height.
Why Use It? : For creating elements that span the entire screen, like full-page sections or backgrounds.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7️⃣ The calc() method in CSS is a powerful function that allows you to perform calculations to determine the values of CSS properties. This can be particularly useful for creating responsive layouts and dynamic sizing.
Syntax
The basic syntax for the calc() function is:
css
property: calc(expression);
Where property is the CSS property you want to set, and expression is the mathematical expression you want to evaluate.
Supported Operators
+: Addition
-: Subtraction
*: Multiplication
/: Division
Example
Let's look at an example to understand how the calc() method can be used.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calc Method Example</title>
    <style>
        .box {
            width: calc(100% - 20px);
            height: 200px;
            background-color: #333;
            color: #fff;
            margin: 10px;
            padding: 10px;
            box-sizing: border-box; /* Include padding and border in element's total width and height */
        }
        .box-inner {
            height: calc(100% - 20px);
            background-color: #555;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div class="box">
        Outer Box
        <div class="box-inner">Inner Box</div>
    </div>
</body>
</html>
Explanation
Outer Box Width: The outer box has a width of calc(100% - 20px), which means it will take the full width of its container minus 20 pixels.
Box Sizing: The box-sizing: border-box; property ensures that padding and border are included in the element's total width and height.
Inner Box Height: The inner box has a height of calc(100% - 20px), which means it will take the full height of its parent (the outer box) minus 20 pixels.
Use Cases
Responsive Layouts: calc() can help create dynamic and responsive layouts by adjusting element sizes based on viewport dimensions.
Spacing and Alignment: You can use calc() to adjust margins, padding, and positioning based on other element sizes or viewport dimensions.
Combining Units: calc() allows you to combine different units, such as percentages, pixels, and ems, in a single expression.
The calc() method is a versatile tool in CSS that provides greater flexibility and control over the layout and design of web pages.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8️⃣ CSS Variables
CSS Variables, also known as Custom Properties, allow you to store values that you can reuse throughout your CSS. This can make your code more maintainable and easier to read.
Syntax
CSS Variables are defined within a selector that defines its scope, and they are accessed using the var() function.
Defining Variables
Variables are defined using the -- prefix:
css
:root {
    --main-bg-color: #333;
    --main-text-color: #fff;
    --main-padding: 20px;
}
In this example, the variables are defined globally within the :root selector, which represents the document's root element.
Using Variables
Variables are used with the var() function:
css
.box {
    background-color: var(--main-bg-color);
    color: var(--main-text-color);
    padding: var(--main-padding);
    margin: 10px;
    border-radius: 10px;
}
Example
Let's see a complete example where CSS Variables are defined and used.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Variables Example</title>
    <style>
        :root {
            --main-bg-color: #333;
            --main-text-color: #fff;
            --main-padding: 20px;
        }
        .box {
            background-color: var(--main-bg-color);
            color: var(--main-text-color);
            padding: var(--main-padding);
            margin: 10px;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div class="box">CSS Variables Example</div>
</body>
</html>
Explanation
Defining Variables: The :root selector is used to define three variables: --main-bg-color, --main-text-color, and --main-padding.
Using Variables: The .box class uses the var() function to apply the values of the variables for background-color, color, and padding.
Advantages of CSS Variables
Reusability: Define once, use everywhere. This reduces repetition and makes your CSS more maintainable.
Dynamic Updating: You can change a variable's value in one place, and it updates everywhere the variable is used.
Scoping: Variables can be defined within specific selectors, allowing for local customization.
Advanced Usage
CSS Variables can also accept fallback values and be used in calculations.
Fallback Values
If a variable is not defined, you can provide a fallback value:
css
background-color: var(--undefined-color, blue);
Using in Calculations
Variables can be used in the calc() function:
css
width: calc(100% - var(--main-padding));
CSS Variables offer a powerful way to enhance your CSS, making it more flexible and easier to maintain
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1️⃣ CSS Framework
A CSS framework is a pre-prepared library that is meant to be used as a foundation for building responsive web designs more quickly and efficiently. They come with pre-defined styles, layouts, and functionalities, making it easier for developers to create web pages without having to write CSS from scratch.
Key Features of CSS Frameworks:
Grid Systems: They offer flexible grid systems to help in designing layouts.
Pre-Designed Components: Buttons, forms, navigation bars, modals, and other common web components come with ready-made styles.
Responsive Design: CSS frameworks ensure that your designs are responsive and look good on various devices.
Cross-Browser Compatibility: They handle browser inconsistencies, ensuring your site looks consistent across different web browsers.
Customization: Most frameworks allow for customization, so you can override their default styles to match your design needs.
Popular CSS Frameworks:
Bootstrap: One of the most widely used frameworks, known for its comprehensive components and responsive grid system.
Foundation: Another popular framework, known for its advanced grid system and flexible UI components.
Bulma: A modern CSS framework based on Flexbox, offering easy-to-use and clean components.
Tailwind CSS: A utility-first framework that provides low-level utility classes for fast and efficient styling.
✅ Example: Using Bootstrap Framework
html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1 class="text-primary">Hello, CSS Framework!</h1>
        <button class="btn btn-success">Click Me</button>
    </div>
</body>
</html>
🔹 Effect:The text is styled as a Bootstrap primary heading.
The button uses Bootstrap’s success style.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2️⃣ translate() (CSS Transform)
🔹 What is translate()?
The translate() function moves an element horizontally (X-axis) or vertically (Y-axis). It’s part of the transform property.
Example
Let's look at an example to better understand how translate() works.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Translate Example</title>
    <style>
        .box {
            width: 100px;
            height: 100px;
            background-color: #333;
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 50px;
            transition: transform 0.5s;
        }
        .box:hover {
            transform: translate(50px, 50px);
        }
    </style>
</head>
<body>
    <div class="box">Hover me!</div>
</body>
</html>
Explanation
The .box class defines a square with a background color and some text centered inside it.
The transition: transform 0.5s; property ensures that the transformation is animated over 0.5 seconds.
When you hover over the box, the transform: translate(50px, 50px); property moves the box 50 pixels to the right and 50 pixels down.
The translate() function is quite powerful and can be combined with other transform functions like rotate(), scale(), and skew() to create complex animations and transformations.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3️⃣ What is a Sprite? CSS Image Sprites
In the context of CSS, a sprite is a large image containing multiple smaller images. The individual images are extracted from the sprite and used as needed. This technique helps in optimizing website performance by reducing the number of HTTP requests required to load images.
Advantages of Using CSS Image Sprites
Reduced HTTP Requests: By combining multiple images into one, the number of HTTP requests to the server is minimized, leading to faster page load times.
Improved Performance: Fewer requests mean better performance, especially for websites with many small images like icons or buttons.
Centralized Management: Managing a single sprite file is often easier than handling many individual image files.
How to Use CSS Image Sprites
Here’s a step-by-step example of how to use a sprite sheet in CSS.
Sprite Sheet Image
Imagine you have a sprite sheet image called sprite.png that contains three icons: a star, a heart, and a diamond.
HTML
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CSS Image Sprites</title>
    <style>
        .sprite {
            width: 50px;
            height: 50px;
            background: url('sprite.png') no-repeat;
            display: inline-block;
        }
        .star {
            background-position: 0 0;
        }
        .heart {
            background-position: -50px 0;
        }
        .diamond {
            background-position: -100px 0;
        }
    </style>
</head>
<body>
    <div class="sprite star"></div>
    <div class="sprite heart"></div>
    <div class="sprite diamond"></div>
</body>
</html>
Explanation
.sprite Class: Defines a width, height, and background image (the sprite sheet).
Individual Classes: Each individual class (.star, .heart, .diamond) defines a background-position to display the correct part of the sprite sheet. For example, .star shows the star icon by setting background-position: 0 0;.
How It Works
Background Position: background-position is used to shift the sprite sheet to display only the required part. Negative values are used if the icon is not at the top-left corner.
Inline Display: display: inline-block; ensures that the elements are treated like inline elements while maintaining the block element features like width and height.
This way, CSS image sprites help in optimizing the website's performance while allowing for a neat and centralized way of managing multiple small images.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS preprocessors are tools that extend the capabilities of standard CSS, providing features like variables, nesting, and mixins to make writing and maintaining CSS code more efficient and easier. Let's explore the key features and some examples of popular CSS preprocessors: Sass, LESS, Stylus, and SCSS.
Key Features of CSS Preprocessors
Variables: Store values and reuse them throughout your stylesheet.
Nesting: Nest CSS selectors in a way that follows the same visual hierarchy of your HTML.
Partials and Importing: Split your CSS into smaller, more manageable files and import them when needed.
Mixins: Create reusable blocks of CSS code that can be included in other selectors.
Inheritance: Allow selectors to inherit properties from other selectors.

Example: Using Sass
Variables
Variables help in storing values to be reused across the stylesheet.

scss
// SCSS
$primary-color: #333;
$padding: 20px;

.box {
    background-color: $primary-color;
    color: white;
    padding: $padding;
}
Nesting
Nesting allows you to nest your CSS selectors in a way that follows the structure of your HTML.

scss
// SCSS
.navbar {
    background-color: #333;
    color: white;

    .nav-item {
        color: white;
        
        &:hover {
            color: yellow;
        }
    }
}
Partials and Importing
You can split your CSS into multiple files and use @import to combine them.

scss
// _variables.scss
$primary-color: #333;
$padding: 20px;

// _layout.scss
@import 'variables';

.container {
    padding: $padding;
}

// main.scss
@import 'variables';
@import 'layout';

body {
    background-color: $primary-color;
}
Mixins
Mixins are reusable chunks of code that can be included in other selectors.

scss
// SCSS
@mixin box-style($color) {
    background-color: $color;
    color: white;
    padding: 20px;
    border-radius: 10px;
}

.box {
    @include box-style(#333);
}
Inheritance
Inheritance allows one selector to inherit the styles of another selector using @extend.

scss
// SCSS
%button-style {
    display: inline-block;
    padding: 10px 20px;
    color: white;
    text-align: center;
}

.button {
    @extend %button-style;
    background-color: #333;
}

.button-primary {
    @extend %button-style;
    background-color: blue;
}
Compiling
To use CSS preprocessors, you need to compile the preprocessor code (e.g., SCSS) into standard CSS. This can be done using command-line tools, build tools like Gulp or Grunt, or task runners like Webpack.
Preprocessors greatly enhance CSS with features that simplify writing, managing, and reusing styles. They are widely adopted in modern web development for creating more efficient and maintainable CSS.
1. Sass (Syntactically Awesome Stylesheets)
Sass is one of the most widely used CSS preprocessors, known for its powerful features and flexibility. It has two syntaxes:
.sass: Uses indentation to separate code blocks, similar to Python.
.scss: Uses curly braces and semicolons, similar to regular CSS.
Example (SCSS Syntax)
scss
$primary-color: #333;
$padding: 20px;
.box {
    background-color: $primary-color;
    color: white;
    padding: $padding;
    border-radius: 10px;
}
@mixin box-style($color) {
    background-color: $color;
    color: white;
    padding: 20px;
}
.container {
    @include box-style(#555);
}
2. LESS (Leaner Style Sheets)
LESS is another popular preprocessor that extends CSS with features such as variables, nesting, mixins, and functions.
Example (LESS Syntax)
less
@primary-color: #333;
@padding: 20px;
.box {
    background-color: @primary-color;
    color: white;
    padding: @padding;
    border-radius: 10px;
}
.box-style(@color) {
    background-color: @color;
    color: white;
    padding: 20px;
}
.container {
    .box-style(#555);
}
3. Stylus
Stylus is a less commonly used but powerful preprocessor with a flexible syntax that can be written with or without curly braces and semicolons.
Example (Stylus Syntax)
stylus
primary-color = #333
padding = 20px
.box
    background-color: primary-color
    color: white
    padding: padding
    border-radius: 10px
box-style(color)
    background-color: color
    color: white
    padding: 20px
.container
    box-style(#555)
4. SCSS (Sassy CSS)
SCSS is a syntax of Sass that is fully compatible with CSS. It uses curly braces and semicolons, making it easier to transition from regular CSS to SCSS.
Example (SCSS Syntax)
scss
$primary-color: #333;
$padding: 20px;
.box {
    background-color: $primary-color;
    color: white;
    padding: $padding;
    border-radius: 10px;
}
@mixin box-style($color) {
    background-color: $color;
    color: white;
    padding: 20px;
}
.container {
    @include box-style(#555);
}
Summary
Sass: Known for its powerful features; two syntaxes (Sass and SCSS).
LESS: Extends CSS with variables, nesting, mixins, and functions.
Stylus: Flexible syntax, powerful features.
SCSS: Fully compatible with CSS, uses curly braces and semicolons.
CSS preprocessors enhance CSS with features that simplify writing, managing, and reusing styles, making them essential tools in modern web development
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Here are some recently added CSS properties and features, along with examples:

1. gap for Flexbox
The gap property, previously available for CSS Grid, is now supported in Flexbox as well. It allows you to set spacing between flex items.
css
Copy
.container {
    display: flex;
    gap: 20px; /* Adds space between flex items */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. aspect-ratio
This property allows you to set a fixed aspect ratio for an element, making it easier to maintain consistent proportions.
css
Copy
.box {
    aspect-ratio: 16 / 9; /* Maintains a 16:9 aspect ratio */
    background-color: lightblue;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. accent-color
The accent-color property allows you to customize the color of form controls like checkboxes, radio buttons, and range sliders.
css
Copy
input[type="checkbox"] {
    accent-color: purple;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. @container Queries (Container Queries)
Container queries allow you to style elements based on the size of their container, rather than the viewport.
css
Copy
.card {
    container-type: inline-size;
}
@container (min-width: 400px) {
    .card {
        background-color: lightgreen;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. color-mix() Function
The color-mix() function allows you to mix two colors in a specified color space.
css
Copy
.box {
    background-color: color-mix(in srgb, red 50%, blue 50%);
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. subgrid
The subgrid value for grid-template-columns and grid-template-rows allows nested grids to align with their parent grid.
css
Copy
.parent {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}
.child {
    display: grid;
    grid-template-columns: subgrid; /* Aligns with parent grid */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. backdrop-filter
The backdrop-filter property applies visual effects (like blurring) to the area behind an element.
css
Copy
.modal {
    backdrop-filter: blur(10px); /* Blurs the background behind the modal */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. overscroll-behavior
This property controls the behavior when a user scrolls past the boundaries of an element (e.g., preventing scroll chaining).
css
Copy
.scrollable {
    overscroll-behavior: contain; /* Prevents scroll chaining */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. scroll-snap
The scroll-snap properties allow you to create smooth scrolling experiences with snapping points.
css
Copy
.container {
    scroll-snap-type: y mandatory;
}
.item {
    scroll-snap-align: start;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. ::marker Pseudo-Element
The ::marker pseudo-element allows you to style list item markers (e.g., bullets or numbers).
css
Copy
li::marker {
    color: red;
    font-size: 1.5em;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. initial-letter
The initial-letter property is used to create drop caps or stylized initial letters.
css
Copy
p::first-letter {
    initial-letter: 3; /* Makes the first letter 3 lines tall */
    color: red;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. @layer for Cascade Layers
The @layer rule allows you to define cascade layers, giving you more control over specificity and order of styles.
css
Copy
@layer base, theme;

@layer base {
    .title {
        color: blue;
    }
}
@layer theme {
    .title {
        color: red;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. font-palette
The font-palette property allows you to select a color palette for fonts that support multiple palettes.
css
Copy
.text {
    font-palette: dark; /* Uses the dark color palette */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. color-scheme
The color-scheme property allows you to specify whether an element should use a light or dark color scheme.
css
Copy
body {
    color-scheme: dark; /* Forces dark mode for the element */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. @property
The @property rule allows you to define custom CSS properties with specific syntax, initial values, and inheritance behavior. This is particularly useful for creating more robust and maintainable styles.
css
Copy
@property --my-color {
    syntax: '<color>';
    inherits: false;
    initial-value: red;
}
.box {
    background-color: var(--my-color);
    --my-color: blue; /* Overrides the initial value */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. @scope
The @scope rule helps define scoped styles for specific parts of the DOM, reducing the risk of unintended style overrides.
css
Copy
@scope (.card) {
    .title {
        color: blue; /* Only applies to .title inside .card */
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. content-visibility
The content-visibility property improves performance by skipping rendering for off-screen content until it is needed.
css
Copy
.section {
    content-visibility: auto; /* Skips rendering off-screen content */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. text-wrap
The text-wrap property provides more control over how text wraps within an element, improving readability and layout.
css
Copy
.text {
    text-wrap: balance; /* Balances text across lines */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. white-space-collapse
The white-space-collapse property allows you to control how white space is handled within an element.
css
Copy
.text {
    white-space-collapse: preserve-breaks; /* Preserves line breaks but collapses other spaces */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. animation-composition
The animation-composition property allows blending multiple animations applied to the same element, either additively or cumulatively.
css
Copy
.box {
    animation: slide 2s, fade 2s;
    animation-composition: add; /* Combines animations additively */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. :state()
The :state() pseudo-class allows you to apply styles based on custom states of elements, making it easier to create dynamic UIs.
css
Copy
button:state(active) {
    background-color: green; /* Applies when the button is in an active state */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. overflow: clip
The overflow: clip property clips content that overflows the element's box without adding scrollbars.
css
Copy
.box {
    overflow: clip; /* Clips content without scrollbars */
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. clamp()
The clamp() function allows for fluid typography and responsive design by setting a value that is constrained between a minimum and maximum.
css
Copy
.text {
    font-size: clamp(1rem, 2.5vw, 2rem); /* Fluid font size between 1rem and 2rem */
}
Summary of Use Cases:
@property: Define custom properties with specific behavior.
@scope: Create scoped styles for better maintainability.
content-visibility: Improve performance by skipping off-screen rendering.
text-wrap: Control text wrapping for better readability.
white-space-collapse: Manage white space handling.
animation-composition: Blend multiple animations.
:state(): Apply styles based on custom element states.
overflow: clip: Clip content without scrollbars.
clamp(): Create fluid and responsive designs.
These features are designed to enhance CSS capabilities, making it easier to create efficient, maintainable, and visually appealing web designs. Always check browser compatibility before using them in production!


